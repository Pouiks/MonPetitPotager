[{"/home/virgile/mpp/src/index.js":"1","/home/virgile/mpp/src/reportWebVitals.js":"2","/home/virgile/mpp/src/Components/App/App.js":"3","/home/virgile/mpp/src/Components/Contexts/index.js":"4","/home/virgile/mpp/src/Pages/SignInPage.jsx":"5","/home/virgile/mpp/src/Pages/PlantDetail.jsx":"6","/home/virgile/mpp/src/Pages/CGU.jsx":"7","/home/virgile/mpp/src/Pages/Home.jsx":"8","/home/virgile/mpp/src/Pages/Profil.jsx":"9","/home/virgile/mpp/src/Pages/SignUpPage.jsx":"10","/home/virgile/mpp/src/Pages/Calendar.jsx":"11","/home/virgile/mpp/src/Pages/Garden.jsx":"12","/home/virgile/mpp/src/Pages/Politics.jsx":"13","/home/virgile/mpp/src/Components/ProtectedRoute/index.js":"14","/home/virgile/mpp/src/Pages/NotFound.jsx":"15","/home/virgile/mpp/src/Pages/Unauthorized.jsx":"16","/home/virgile/mpp/src/Pages/Legals.jsx":"17","/home/virgile/mpp/src/Pages/AdminPage.jsx":"18","/home/virgile/mpp/src/Config/baseUrl.js":"19","/home/virgile/mpp/src/Components/GoToTopButton/index.js":"20","/home/virgile/mpp/src/Components/Footer/index.jsx":"21","/home/virgile/mpp/src/Components/Navbar/index.jsx":"22","/home/virgile/mpp/src/Config/theme/fonts.js":"23","/home/virgile/mpp/src/Config/theme/image_size.js":"24","/home/virgile/mpp/src/Config/theme/breakpoint_mobile.js":"25","/home/virgile/mpp/src/Config/theme/styles.js":"26","/home/virgile/mpp/src/Services/pxToRem.js":"27","/home/virgile/mpp/src/Config/theme/colors.js":"28","/home/virgile/mpp/src/Components/ImgTop/index.js":"29","/home/virgile/mpp/src/Components/PlantDetail/index.js":"30","/home/virgile/mpp/src/Components/H1/index.js":"31","/home/virgile/mpp/src/Components/SignIn/index.js":"32","/home/virgile/mpp/src/Components/H3/index.js":"33","/home/virgile/mpp/src/Components/H2/index.js":"34","/home/virgile/mpp/src/Components/Text/index.js":"35","/home/virgile/mpp/src/Components/SignUp/index.js":"36","/home/virgile/mpp/src/Components/SearchBar/index.js":"37","/home/virgile/mpp/src/Components/PlantsList/index.js":"38","/home/virgile/mpp/src/Components/FilterRegion/index.js":"39","/home/virgile/mpp/src/Components/CreateGardenForm/index.js":"40","/home/virgile/mpp/src/Components/PlantsListMobile/index.js":"41","/home/virgile/mpp/src/Components/Filter/index.js":"42","/home/virgile/mpp/src/Components/Button/index.jsx":"43","/home/virgile/mpp/src/Components/GardenPlantsList/index.js":"44","/home/virgile/mpp/src/Components/RedButton/index.jsx":"45","/home/virgile/mpp/src/Components/GardenPlantsListMobile/index.js":"46","/home/virgile/mpp/src/Components/DeleteButton/index.js":"47","/home/virgile/mpp/src/Components/ImgErr/index.js":"48","/home/virgile/mpp/src/Components/LinkButton/index.jsx":"49","/home/virgile/mpp/src/Components/GardenPlantDetail/index.js":"50","/home/virgile/mpp/src/Components/Admin/AdminTableUsers.js":"51","/home/virgile/mpp/src/Components/Admin/AdminTablePlantation.js":"52","/home/virgile/mpp/src/Services/getAuth.js":"53","/home/virgile/mpp/src/Services/login.js":"54","/home/virgile/mpp/src/Components/Logo/index.js":"55","/home/virgile/mpp/src/Components/SignCard/index.js":"56","/home/virgile/mpp/src/Components/ImgCal/index.js":"57","/home/virgile/mpp/src/Components/AddButton/index.js":"58"},{"size":693,"mtime":1667377804400,"results":"59","hashOfConfig":"60"},{"size":362,"mtime":1667377804400,"results":"61","hashOfConfig":"60"},{"size":2568,"mtime":1667377804372,"results":"62","hashOfConfig":"60"},{"size":1948,"mtime":1667377804372,"results":"63","hashOfConfig":"60"},{"size":419,"mtime":1667377804400,"results":"64","hashOfConfig":"60"},{"size":1057,"mtime":1667377804400,"results":"65","hashOfConfig":"60"},{"size":8878,"mtime":1667377804396,"results":"66","hashOfConfig":"60"},{"size":13921,"mtime":1667377804400,"results":"67","hashOfConfig":"60"},{"size":8888,"mtime":1667377804400,"results":"68","hashOfConfig":"60"},{"size":426,"mtime":1667377804400,"results":"69","hashOfConfig":"60"},{"size":11507,"mtime":1667377804396,"results":"70","hashOfConfig":"60"},{"size":11140,"mtime":1667377804400,"results":"71","hashOfConfig":"60"},{"size":17245,"mtime":1667377804400,"results":"72","hashOfConfig":"60"},{"size":324,"mtime":1667377804396,"results":"73","hashOfConfig":"60"},{"size":1786,"mtime":1667377804400,"results":"74","hashOfConfig":"60"},{"size":1974,"mtime":1667377804400,"results":"75","hashOfConfig":"60"},{"size":8562,"mtime":1667377804400,"results":"76","hashOfConfig":"60"},{"size":2204,"mtime":1667377804396,"results":"77","hashOfConfig":"60"},{"size":73,"mtime":1667377804396,"results":"78","hashOfConfig":"60"},{"size":1487,"mtime":1667377804372,"results":"79","hashOfConfig":"60"},{"size":1565,"mtime":1667377804372,"results":"80","hashOfConfig":"60"},{"size":7459,"mtime":1667377804376,"results":"81","hashOfConfig":"60"},{"size":477,"mtime":1667377804396,"results":"82","hashOfConfig":"60"},{"size":184,"mtime":1667377804396,"results":"83","hashOfConfig":"60"},{"size":213,"mtime":1667377804396,"results":"84","hashOfConfig":"60"},{"size":1798,"mtime":1667377804396,"results":"85","hashOfConfig":"60"},{"size":110,"mtime":1667377804400,"results":"86","hashOfConfig":"60"},{"size":141,"mtime":1667377804396,"results":"87","hashOfConfig":"60"},{"size":687,"mtime":1667377804376,"results":"88","hashOfConfig":"60"},{"size":4208,"mtime":1667377804376,"results":"89","hashOfConfig":"60"},{"size":760,"mtime":1667377804372,"results":"90","hashOfConfig":"60"},{"size":4607,"mtime":1667377804396,"results":"91","hashOfConfig":"60"},{"size":882,"mtime":1667377804372,"results":"92","hashOfConfig":"60"},{"size":880,"mtime":1667377804372,"results":"93","hashOfConfig":"60"},{"size":1367,"mtime":1667377804396,"results":"94","hashOfConfig":"60"},{"size":6944,"mtime":1667377804396,"results":"95","hashOfConfig":"60"},{"size":609,"mtime":1667377804396,"results":"96","hashOfConfig":"60"},{"size":7772,"mtime":1667377804396,"results":"97","hashOfConfig":"60"},{"size":999,"mtime":1667377804372,"results":"98","hashOfConfig":"60"},{"size":6179,"mtime":1667377804372,"results":"99","hashOfConfig":"60"},{"size":5504,"mtime":1667377804396,"results":"100","hashOfConfig":"60"},{"size":1037,"mtime":1667377804372,"results":"101","hashOfConfig":"60"},{"size":1016,"mtime":1667377804372,"results":"102","hashOfConfig":"60"},{"size":6218,"mtime":1667377804372,"results":"103","hashOfConfig":"60"},{"size":989,"mtime":1667377804396,"results":"104","hashOfConfig":"60"},{"size":5053,"mtime":1667377804372,"results":"105","hashOfConfig":"60"},{"size":1275,"mtime":1667377804372,"results":"106","hashOfConfig":"60"},{"size":845,"mtime":1667377804376,"results":"107","hashOfConfig":"60"},{"size":1262,"mtime":1667377804376,"results":"108","hashOfConfig":"60"},{"size":3594,"mtime":1667377804372,"results":"109","hashOfConfig":"60"},{"size":13691,"mtime":1667377804372,"results":"110","hashOfConfig":"60"},{"size":23149,"mtime":1667377804372,"results":"111","hashOfConfig":"60"},{"size":308,"mtime":1667377804400,"results":"112","hashOfConfig":"60"},{"size":361,"mtime":1667377804400,"results":"113","hashOfConfig":"60"},{"size":325,"mtime":1667377804376,"results":"114","hashOfConfig":"60"},{"size":489,"mtime":1667377804396,"results":"115","hashOfConfig":"60"},{"size":808,"mtime":1667377804376,"results":"116","hashOfConfig":"60"},{"size":1281,"mtime":1667377804372,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"drmxe5",{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/virgile/mpp/src/index.js",[],[],"/home/virgile/mpp/src/reportWebVitals.js",[],[],"/home/virgile/mpp/src/Components/App/App.js",["308"],["309"],"import React, {useContext, useState, useEffect} from 'react';\nimport './App.css';\nimport {Routes, Route} from 'react-router-dom';\nimport Home from '../../Pages/Home'\nimport Profil from '../../Pages/Profil'\nimport SignUp from '../../Pages/SignUpPage'\nimport SignIn from '../../Pages/SignInPage'\nimport Calendar from '../../Pages/Calendar'\nimport PlantDetail from '../../Pages/PlantDetail'\nimport Garden from '../../Pages/Garden'\nimport CGU from '../../Pages/CGU'\nimport Politics from '../../Pages/Politics'\nimport Legals from '../../Pages/Legals'\nimport NotFound from '../../Pages/NotFound'\nimport Unauthorized from '../../Pages/Unauthorized'\nimport Navbar from '../Navbar'\nimport Footer from '../Footer'\nimport {authContext} from '../../Components/Contexts'\nimport ProtectedRoute from '../../Components/ProtectedRoute'\nimport GoTopButton from '../../Components/GoToTopButton'\nimport AdminPage from '../../Pages/AdminPage'\n\nfunction App(props) {\n  // eslint-disable-next-line no-unused-vars\n  const { auth, setAuth } = useContext(authContext);\n  //const [user, setUser] = useState(null)\n  const [userRole, setUserRole]= useState('');\n  const role = localStorage.getItem('role');\n  useEffect(() => {\n    auth.user ? setUserRole(auth.user.role) : setUserRole('')\n  }, [auth, userRole])\n\n  return (\n\n    <div className=\"App\">\n      \n        <Navbar />\n        <Routes>\n            <Route path='/' element={<Home />}/>\n            <Route path='/mon-profil' element={<Profil />}/>\n            <Route path='/connexion' element={<SignIn />}/>\n            <Route path='/creer-mon-compte' element={<SignUp />}/>\n            <Route path='/calendrier' element={<Calendar />}/>\n            <Route path='/calendrier/:id' element={<PlantDetail />}/>\n            <Route path='/cgu' element={<CGU />}/>\n            <Route path='/politique-confidentialite' element={<Politics />}/>\n            <Route path='/mentions-legales' element={<Legals />}/>\n\n            <Route exact path='/mon-potager' element={\n                <ProtectedRoute role='user'>\n                  <Garden />\n                </ProtectedRoute>}\n            /> \n\n            <Route path='/back-office' element={\n              <ProtectedRoute role='admin'>\n                <AdminPage />\n              </ProtectedRoute>}\n            />\n\n            <Route path='*' element={<NotFound />}/>\n            <Route path='/403' element={<Unauthorized/>}/>\n            {/* <Route path='/calendrier/*' element={<NotFound />}/> */}\n        </Routes>\n        <GoTopButton />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","/home/virgile/mpp/src/Components/Contexts/index.js",[],[],"/home/virgile/mpp/src/Pages/SignInPage.jsx",[],[],"/home/virgile/mpp/src/Pages/PlantDetail.jsx",[],[],"/home/virgile/mpp/src/Pages/CGU.jsx",[],[],"/home/virgile/mpp/src/Pages/Home.jsx",[],[],"/home/virgile/mpp/src/Pages/Profil.jsx",["310","311"],[],"import React, {useState, useEffect, useContext} from 'react';\nimport {NavLink, useNavigate} from 'react-router-dom'\nimport TextField from '@mui/material/TextField';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Box from '@mui/material/Box';\nimport styled from 'styled-components';\nimport H1 from '../Components/H1'\nimport Button from '../Components/Button'\nimport RedButton from '../Components/RedButton'\nimport BASEURL from '../Config/baseUrl';\nimport axios from 'axios';\nimport pxToRem from '../Services/pxToRem';\nimport styles from '../Config/theme/styles';\nimport colors from '../Config/theme/colors';\nimport {authContext} from '../Components/Contexts';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\n\nconst StyledCard = styled.div`\n    display: flex;\n    flex-direction: column;;\n    width: ${pxToRem(500)};\n    margin: ${pxToRem(50)};\n    padding: ${styles.padding.xl} ${styles.padding.xxl};\n    vertical-align: middle;\n    box-shadow: ${styles.boxShadow.xl};\n    border-radius : ${styles.radius.xxl};\n    `\nconst StyledContainer = styled.div`\n    display:flex;\n    align-items: center;\n    justify-content: center;\n`\nconst StyleNavLink = styled(NavLink)`\n    padding: 5px 5px;\n    align-self: center;\n    text-decoration: none;\n    color: ${colors.primary};\n\n    :hover {\n        text-decoration: underline;\n        color: ${colors.secondary};\n    }\n`\n\nconst Profil = () => {\n    const navigate = useNavigate();\n    const userId = localStorage.getItem('id');\n    const name = localStorage.getItem('name');\n    const email = localStorage.getItem('email');\n    const token = localStorage.getItem('token');\n    const { auth, setUserDataToContext } = useContext(authContext);\n\n    const [passwordConfirmation, setPasswordConfirmation] = useState('');\n    const [password, setPassword] = useState('');\n    const [oldPassword, setOldPassword ] = useState('');\n    const [openSnack, setOpenSnack] = useState(false);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [message, setMessage] = useState('');\n    const [severity, setSeverity] = useState('');\n\n    const [ user, setUser ] = useState({\n        id: userId,\n        name: name,\n        email: email,\n        password: '',\n        role: 'user',\n    })\n\n    const loadUser = (id) => {\n        try {\n            axios.get(`${BASEURL}/users/${id}`, {headers: {\n                'Authorization' : `Bearer ${token}`\n            }}).then((res) => {\n                setUser({\n                    name: res.data.user.name,\n                    email: res.data.user.email,\n                    password: res.data.user.password,\n                });\n            })\n        } catch(error) {\n            console.error(error);\n        }\n    } \n    \n    const updateUser = (id) => {\n            if(password !== '') {\n                if(password !== passwordConfirmation || oldPassword !== user.password){\n                    setMessage('Les mots de passe ne correspondent pas');\n                    setSeverity('error');\n                    setOpenSnack(true);\n                }\n            }\n            axios.put(`${BASEURL}/users/${id}/update`, {\n                name: user.name,\n                email: user.email,\n                password: user.password\n                }, {headers: {\n                        'Authorization' : `Bearer ${token}`\n                    }\n                })\n                .then((res) => {\n                    setUser({\n                        name: user.name,\n                        email: user.email,\n                        password: user.password,\n                    });\n                    setUserDataToContext({id: id, name: user.name, email: user.email, password: password, role: 'user'});\n                    setMessage('Vos informations ont été mises à jour');\n                    setSeverity('success');\n                })\n                .catch((error) => {\n                    setMessage('Les modifications ne sont pas appliquées');\n                    setSeverity('error');\n                })\n                .finally(() => {\n                    setOpenSnack(true);\n                    setPassword('');\n                    setPasswordConfirmation('');\n                    setOldPassword('');\n                })\n    }\n\n    const deleteMyProfile = (id) => {\n        axios.delete(`${BASEURL}/users/${id}/delete`, {headers: {\n            'Authorization' : `Bearer ${token}`\n        }})\n        .then((res) => {\n            setMessage('Vos compte à été supprimé')\n            setSeverity('success')\n        })\n        .catch((error) => {\n            setMessage('Une erreur est survenue')\n            setSeverity('error')\n        })\n        .finally(() => {\n            closeDialog();\n            setOpenSnack(true);\n        })\n        localStorage.clear();\n        setTimeout(() => navigate('/'), \"2000\")\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenSnack(false);\n        };\n\n    const handleNameProfil = (e) => {\n        setUser({...user, name: e.target.value})\n    }\n\n    const handleEmailProfil = (e) => {\n        setUser({...user, email: e.target.value})\n    }\n\n    const handlePasswordProfil = (e) => {\n        setPassword(e.target.value)\n    }\n\n    const handlePasswordConfirmationProfil = (e) => {\n        setPasswordConfirmation(e.target.value)\n    }\n\n    const handleOpenDialog = () => {\n        setOpenDialog(true);\n    }\n\n    const closeDialog = () => {\n        setOpenDialog(false);\n    }\n\n    useEffect(() => {\n        loadUser(userId);\n    }, [userId])\n  \n    return (\n        <StyledContainer>\n            <StyledCard>\n                <H1 content=\"Mon profil\" />\n                <TextField\n                    required\n                    id=\"profil_name\"\n                    label=\"Votre prénom\"\n                    defaultValue={name ? name : ''}\n                    onChange={handleNameProfil}\n                    sx = {{my:2}}\n                    />\n                <TextField\n                    required\n                    id=\"profil_email\"\n                    label=\"email\"\n                    defaultValue={email ? email : ''}\n                    onChange={handleEmailProfil}\n                    sx = {{my:2}}\n                    />\n                <TextField\n                    type=\"password\"\n                    id=\"new_password\"\n                    label=\"Changer mon mot de passe\"\n                    onChange={handlePasswordProfil}\n                    sx = {{my:2}}\n                    />\n\n                    {\n                        password !== '' && \n                        <TextField\n                        required\n                        type=\"password\"\n                        id=\"profil_name\"\n                        label=\"confirmation du nouveau mot de passe\"\n                        onChange={handlePasswordConfirmationProfil}\n                        sx = {{my:2}}\n                        />\n                    }\n\n                    { password !== '' &&\n                        <TextField\n                        required\n                        type=\"password\"\n                        id=\"profil_old_password\"\n                        label=\"Ancien mot de passe\"\n                        onChange={handlePasswordConfirmationProfil}\n                        sx = {{my:2}}\n                        />\n                    }\n\n                <Box sx={{display:'flex',  justifyContent:'space-around'}}>  \n                    <Button content=\"Mettre à jour\" onClick={() => updateUser(userId)}/>\n                    <RedButton content=\"Supprimer mon profil\" onClick={handleOpenDialog}/>\n                </Box>\n                    <StyleNavLink to={'/mon-potager'} >Consulter mon potager</StyleNavLink>\n            </StyledCard>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n            >\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                {message}\n                </Alert>\n            </Snackbar>\n\n        <Dialog\n            open={openDialog}\n            onClose={closeDialog}>\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Êtes-vous sûr?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Cette action est définitive.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button content=\"Annuler\" onClick={closeDialog}/>\n            <RedButton content=\"Confirmer\" onClick={() => deleteMyProfile(userId)}/>\n        </DialogActions>\n        </Dialog>\n        </StyledContainer>\n    )\n}\n\nexport default Profil;","/home/virgile/mpp/src/Pages/SignUpPage.jsx",[],[],"/home/virgile/mpp/src/Pages/Calendar.jsx",["312","313","314","315","316","317","318","319"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Styles from '../Config/theme/styles';\nimport H1 from '../Components/H1';\nimport H3 from '../Components/H3';\nimport SearchBar from '../Components/SearchBar';\nimport axios from \"axios\";\nimport baseUrl from '../Config/baseUrl';\nimport PlantsList from '../Components/PlantsList';\nimport PlantsListMobile from '../Components/PlantsListMobile';\nimport DetailPlant from '../Components/PlantDetail'\nimport { Box } from '@mui/system';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport IconButton from '@mui/material/IconButton';\nimport FilterCategory from '../Components/Filter';\nimport Text from '../Components/Text';\nimport colors from '../Config/theme/colors';\nimport pxToRem from '../Services/pxToRem'\nimport FilterRegion from '../Components/FilterRegion';\nimport { useNavigate } from 'react-router-dom';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n\nconst Content = styled.div`\n    padding: ${Styles.padding.xl};\n`\n\nconst Filters = styled.div`\n    padding: ${Styles.padding.sm};\n    display: flex;\n    gap: 1%;\n`\n\nconst Legend = styled.div`\n    padding: ${Styles.padding.sm};\n    display: flex;\n    width: ${pxToRem(325)};\n`\n\nconst SowingDot = styled.div`\n    width: 25px;\n    height: 25px;\n    border-radius: ${Styles.radius.circ};\n    background-color: ${colors.secondary};\n`\n\nconst HarvestDot = styled.div`\n    width: 25px;\n    height: 25px;\n    border-radius: ${Styles.radius.circ};\n    background-color: ${colors.tertiary};\n`\n\nconst Calendar = () => {\n    const userId = localStorage.getItem('id');\n    const token = localStorage.getItem('token');\n    const navigate = useNavigate();\n\n    const [plants, setPlants] = useState([]);\n    const [plant, setPlant] = useState({});\n    const [isShown, setIsShown] = useState(false);\n    const [search, setSearch] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [category, setCategory] = useState('');\n    const [regions, setRegions] = useState([]);\n    const [region, setRegion] = useState('');\n    const [plantsByRegion, setPlantsByRegion] = useState([]);\n    const [gardens, setGardens] = useState([]);\n    const [userPlants, setUserPlants] = useState([]);\n\n    //snackbar\n    const [openSnack, setOpenSnack] = useState(false)\n    const [message, setMessage] = useState('')\n    const [severity, setSeverity] = useState('')\n\n    const getPlants = () => {\n        try {\n            axios.get(baseUrl + \"/plants\").then((res) => {\n                setPlants(res.data);\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getPlant = (id) => {\n        try {\n            axios.get(baseUrl + '/plants/' + id).then((res) => {\n                setPlant(res.data.plant);\n                openDetail()\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getCategories = () => {\n        try {\n            axios.get(baseUrl + \"/categories\").then((res) => {\n                setCategories(res.data);\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getRegions = () => {\n        try {\n            axios.get(baseUrl + \"/regions\").then((res) => {\n                setRegions(res.data);\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getPlantsbyRegions = (id) => {\n        if (id && id !== \"\") {\n            try {\n                axios.get(baseUrl + \"/plants/region/\" + id).then((res) => {\n                    setPlantsByRegion(res.data);\n                });\n            } catch (error) {\n                console.error(error);\n            }\n        } else {\n            setPlantsByRegion(filteredPlants);\n        }\n    }\n\n    const getGardens = (id) => {\n        if (id && id !== '') {\n            try {\n                axios.get(baseUrl + \"/gardens/user/\" + id, { headers: { 'Authorization': `Bearer ${token}` } })\n                    .then((res) => {\n                        setGardens(res.data.gardens);\n                    });\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    }\n\n    const gardenId = gardens[0]?.id;\n\n    const getUserPlants = (id) => {\n        try {\n            axios.get(baseUrl + \"/plants/user/\" + id, { headers: { 'Authorization': `Bearer ${token}` } }).then((res) => {\n                setUserPlants(res.data);    \n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const addPlant = (id) => {\n        if (userId && userId !== undefined && gardens.length > 0) {\n            axios.post(baseUrl + \"/gardens/plant/add\", {\n                plantId: id,\n                gardenId: gardenId\n            }, {\n                headers: { 'Authorization': `Bearer ${token}` }\n            })\n                .then((res) => {\n                    setMessage(res.data.message)\n                    setSeverity('success')\n                })\n                .catch((error) => {\n                    setMessage(error.response.data)\n                    setSeverity('error')\n                })\n                .finally(() => {\n                    setOpenSnack(true);\n                })\n        } else if (gardens.length === 0) {\n            navigate(\"/mon-potager\");\n        }\n    }\n\n    const deletePlant = (id) => {\n        axios.post(baseUrl + \"/gardens/plant/delete\", {\n            plantId: id,\n            gardenId: gardenId\n        }, {\n            headers: { 'Authorization': `Bearer ${token}` }\n        })\n            .then((res) => {\n                setMessage(res.data)\n                setSeverity('success')\n            })\n            .catch((error) => {\n                setMessage(error.response)\n                setSeverity('error')\n            })\n            .finally(() => {\n                setOpenSnack(true);\n            })\n    }\n\n    const openDetail = () => {\n        setIsShown(true)\n    };\n\n    const closeDetail = () => {\n        setIsShown(false)\n    };\n\n    const handleClose = () => {\n        setOpenSnack(false);\n    };\n\n    // For category filter\n    const handleCategoryChange = (event) => {\n        setCategory(event.target.value);\n    };\n\n    // For region filter\n    const handleRegionChange = (event) => {\n        const id = event.target.value;\n        setRegion(id);\n        getPlantsbyRegions(id);\n    };\n\n    // For Search Bar\n    const handleSearch = (event) => {\n        setSearch(event.target.innerText)\n    };\n\n    useEffect(() => {\n        getPlants();\n        getCategories();\n        getRegions();\n        getGardens(userId);\n        getUserPlants(userId);\n    }, [userId]);\n\n    let regionsPlants = plants;\n\n    if (plantsByRegion.length > 0) {\n        regionsPlants = plantsByRegion;\n    }\n\n    const categoriesPlants = regionsPlants\n        .sort((a, b) =>\n            a.name > b.name ? 1 : -1,\n        )\n        .filter((plant) => {\n            if (category === '' || category === undefined) {\n                return plants\n            }\n            else if (plant.category_id === category) {\n                return plant\n            }\n        }\n        );\n\n    const filteredPlants = regionsPlants\n        .sort((a, b) =>\n            a.name > b.name ? 1 : -1,\n        )\n        .filter((plant) =>\n        // Search\n        {\n            if (search === '' || search === undefined) {\n                return plants\n            }\n            else if (plant.name === search) {\n                return plant\n            }\n        }\n        )\n        .filter((plant) =>\n        // Filter category\n        {\n            if (category === '' || category === undefined) {\n                return plants\n            }\n            else if (plant.category_id === category) {\n                return plant\n            }\n        }\n        );\n\n    return (\n        <div>\n\n            <Content>\n                <H1 content=\"Calendrier de plantation\" />\n\n                <Filters>\n                    <FilterCategory\n                        categories={categories}\n                        category={category}\n                        handleCategoryChange={handleCategoryChange} />\n                    {/* <FilterRegion\n                        regions={regions}\n                        region={region}\n                        handleRegionChange={handleRegionChange} /> */}\n                    <SearchBar\n                        plants={categoriesPlants}\n                        search={search}\n                        handleSearch={handleSearch} />\n                </Filters>\n                <Box sx={{ display: 'flex', justifyContent: 'space-around' }} >\n\n                    <div style={\n                        isShown\n                            ? { width: '73%' }\n                            : { width: '100%' }} >\n\n                        <H3 content=\"Légende\" />\n                        <Legend>\n                            <SowingDot />\n                            <Text\n                                content=\"Période de semis\"\n                            />\n\n                            <HarvestDot />\n                            <Text\n                                content=\"Période de récolte\"\n                            />\n                        </Legend>\n\n                        {filteredPlants &&\n                            <PlantsList\n                                plants={filteredPlants}\n                                userPlants={userPlants}\n                                getPlant={getPlant}\n                                userId={userId}\n                                addPlant={addPlant}\n                                deletePlant={deletePlant} />\n                        }\n                        {filteredPlants &&\n                            <PlantsListMobile\n                                plants={filteredPlants}\n                                userPlants={userPlants}\n                                userId={userId}\n                                addPlant={addPlant}\n                                deletePlant={deletePlant}\n                            />}\n                    </div>\n\n                    {isShown &&\n                        <Box sx={{ boxShadow: `${Styles.boxShadow.xl}`, width: '25%', ml: '2%', borderRadius: 6, display: 'flex', justifyContent: 'space-between', flexDirection: 'column', alignItems: 'end', height: 'fit-content', position: 'sticky', top: 150 }}>\n                            <IconButton aria-label=\"delete\" size=\"large\" onClick={() => closeDetail()}>\n                                <CancelIcon fontSize=\"inherit\" />\n                            </IconButton>\n                            <DetailPlant\n                                plant={plant}\n                                userPlants={userPlants}\n                                userId={userId}\n                                addPlant={addPlant}\n                                deletePlant={deletePlant} />\n                        </Box>\n                    }\n                </Box>\n\n            </Content>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={5000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n            >\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                {message}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n\nexport default Calendar;","/home/virgile/mpp/src/Pages/Garden.jsx",["320"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Styles from '../Config/theme/styles';\nimport Button from '../Components/Button';\nimport axios from \"axios\";\nimport baseUrl from '../Config/baseUrl';\nimport CreateGardenForm from '../Components/CreateGardenForm';\nimport H1 from '../Components/H1';\nimport H2 from '../Components/H2';\nimport H3 from '../Components/H3';\nimport { Box } from '@mui/system';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport IconButton from '@mui/material/IconButton';\nimport { Typography } from '@mui/material';\nimport GardenPlantsList from '../Components/GardenPlantsList';\nimport GardenPlantsListMobile from '../Components/GardenPlantsListMobile';\nimport DeleteButton from '../Components/DeleteButton';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport GardenPlantDetail from '../Components/GardenPlantDetail'\n\nconst Content = styled.div`\n    padding: ${Styles.padding.xl};\n    text-align: center;\n`\nconst capitalizeFirst = str => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst Garden = () => {\n    \n    let userId = localStorage.getItem('id');\n    userId = parseInt(userId);\n    const token = localStorage.getItem('token');\n\n    const [gardens, setGardens] = useState([]);\n    const [isShown, setIsShown] = useState(false);\n    const [plant, setPlant] = useState({});\n\n    //snackbar\n    const [openSnack, setOpenSnack] = useState(false)\n    const [message, setMessage] = useState('')\n    const [severity, setSeverity] = useState('')\n\n    const handleClose = () => {\n        setOpenSnack(false);\n    };\n\n    const handleClick = () => {\n        setIsShown(true);\n    };\n\n    const closeDetail = () => {\n        setIsShown(false)\n    };\n\n    const getAll = (id) => {\n        let regions = [];\n        try {\n            axios.get(baseUrl + \"/regions\").then((res) => {\n                regions = res.data;\n            });\n        } catch (error) {\n            console.error(error);\n        }\n        if (id && id !== '') {\n            try {\n                axios.get(baseUrl + \"/plants/user/\" + id, { headers: { 'Authorization': `Bearer ${token}` } }).then((res) => {\n                    const plants = res.data;                    \n                    getGardens(id, plants, regions);\n                });\n\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    }\n    \n    const getGardens = (id, plants, regions) => {\n        if (id && id !== '') {\n            try {\n                axios.get(baseUrl + \"/gardens/user/\" + id, { headers: { 'Authorization': `Bearer ${token}` } }).then((res) => {\n                    const data_garden = res.data.gardens;\n                    data_garden.forEach(garden => {\n                        regions.forEach(region => {\n                            if (garden.region_id === region.id) {\n                                garden.region_name = region.name\n                            }\n                        })\n\n                        garden.plants = [];\n\n                        plants.forEach(plant => {\n                            if (garden.id === plant.garden_id)\n                                garden.plants.push(plant)\n                        })\n                        \n                    })\n                    setGardens(data_garden);\n                });\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    }\n\n    const deleteGarden = (id) => {\n        axios.delete(baseUrl + \"/gardens/\" + id + \"/delete\", { headers: { 'Authorization': `Bearer ${token}` } })\n        \n            .then((res) => {\n                    setMessage(res.data)\n                    setSeverity('success')\n                })\n            .catch((error) =>{\n                setMessage(error.response)\n                setSeverity('error')\n            })\n            .finally(() => {\n                setOpenSnack(true);\n                setTimeout(function(){\n                    window.location.reload();\n                }, 1000);\n            })\n        }\n\n    const openDetail = () => {\n        setIsShown(true)\n    };\n\n    const gardenId = gardens[0]?.id;\n\n    const deletePlant = (id) => {\n        axios.post(baseUrl + \"/gardens/plant/delete\", {\n            plantId: id,\n            gardenId: gardenId\n        }, {\n            headers: { 'Authorization': `Bearer ${token}` }\n        })\n            .then((res) => {\n                setMessage(res.data)\n                setSeverity('success')\n            })\n            .catch((error) => {\n                setMessage(error.response)\n                setSeverity('error')\n            })\n            .finally(() => {\n                setOpenSnack(true);\n                setTimeout(function(){\n                    window.location.reload();\n                }, 2000);\n                \n            })\n    }\n\n    const getPlant = (id) => {\n        try {\n            axios.get(baseUrl + '/plants/' + id, {\n                plantId: id,\n            },\n            {\n                headers: { 'Authorization': `Bearer ${token}` }\n            })\n            .then((res) => {\n                setPlant(res.data.plant);\n                openDetail()\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    useEffect(() => {\n        getAll(userId);\n    }, [userId]);\n\n    const garden = gardens[0];\n\n    return (\n        <div>\n            <Content>\n                <Box sx={{ display: 'flex', justifyContent: 'space-around' }} >\n                    <div style={\n                        isShown\n                            ? { width: '73%' }\n                            : { width: '100%' }\n                        } >\n\n                        {\n                            gardens && gardens.length === 0\n                                ?\n                                <div>\n                                    <H3 content=\"Vous n'avez pas encore de potager\" />\n                                    {\n                                    !isShown &&\n                                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 5 }}>\n                                        <Button\n                                            content=\"Créer un potager\"\n                                            onClick={handleClick} />\n                                    </Box>\n                                    }\n                                </div>\n                                \n                                :\n                                <Box sx={{ textAlign: 'left'}}>\n                                    <H1 content=\"Mon potager\" />\n                                    <>\n                                        {/* {\n                                            gardens.map((garden) => ( */}\n                                                <div key={garden.id}>\n                                                    <Box sx= {{display: 'flex', justifyContent:'space-around', alignItems: 'baseline', borderBottom: 1, mb: 4}}>\n                                                    <H2 content={capitalizeFirst(garden.name)} />\n                                                    <Typography>Superficie : {garden.area} m²</Typography>\n                                                    <Typography>Région : {garden.region_name}</Typography>\n                                                    <DeleteButton\n                                                        content=\"-\"\n                                                        alt=\"Supprimer\"\n                                                        title=\"Supprimer\"\n                                                        onClick={() => deleteGarden(garden.id)} />\n                                                    </Box>\n                                                    {garden.plants.length > 0\n                                                        ?\n                                                        <>\n                                                        <GardenPlantsList\n                                                            plants={garden.plants}\n                                                            getPlant={getPlant}\n                                                            userId={userId}\n                                                            deletePlant={deletePlant}\n                                                        />\n\n                                                        <GardenPlantsListMobile\n                                                            plants={garden.plants}\n                                                            getPlant={getPlant}\n                                                            userId={userId}\n                                                            deletePlant={deletePlant}\n                                                        />\n                                                        </>\n                                                        :\n                                                        <H3 content=\"Votre potager est vide\" />\n                                                    }\n\n                                                </div>\n\n                                            {/* )) } */}\n                                    </>\n                                </Box>\n                        }\n\n                    </div>\n\n                    {isShown &&\n\n                        <Box sx={{ boxShadow: `${Styles.boxShadow.xl}`, width: '25%', ml: '2%', borderRadius: 6, display: 'flex', justifyContent: 'space-between', flexDirection: 'column', alignItems: 'end', height: 'fit-content', position: 'sticky', top: 150 }}>\n                            <IconButton aria-label=\"delete\" size=\"large\" onClick={() => closeDetail()}>\n                                <CancelIcon fontSize=\"inherit\" />\n                            </IconButton>\n                            {\n                            gardens && gardens.length === 0\n                                ?\n                            <CreateGardenForm\n                                userId={userId} />\n                            :\n                            <GardenPlantDetail\n                            \n                                //plant={plant}\n                                plant={plant}\n                                userId={userId}\n                                //addPlant={addPlant}\n                                deletePlant={deletePlant} />  \n                            } \n                        </Box>\n                           \n\n                    }\n                </Box>\n            </Content>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={5000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n            >\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                {message}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n\nexport default Garden;","/home/virgile/mpp/src/Pages/Politics.jsx",[],[],"/home/virgile/mpp/src/Components/ProtectedRoute/index.js",[],[],"/home/virgile/mpp/src/Pages/NotFound.jsx",[],[],"/home/virgile/mpp/src/Pages/Unauthorized.jsx",["321"],[],"import React, {useContext} from 'react';\nimport H1 from '../Components/H1'\nimport LinkButton from '../Components/LinkButton'\nimport colors from '../Config/theme/colors'\nimport styled from 'styled-components'\nimport pxToRem from '../Services/pxToRem';\nimport Text from '../Components/Text';\nimport ImgErr from '../Components/ImgErr';\nimport { breakpoint_mobile } from '../Config/theme/breakpoint_mobile';\n\n\nconst Body = styled.div`\nwidth: 100%;\nheight: 100%;\n`\nconst Container = styled.div`\nwidth: 100%;\nheight: 100%;\ndisplay: flex;\njustify-content: center;\n\n@media screen and (max-width:${breakpoint_mobile.tabletM}){\n    display:block;\n    \n}\n`\nconst ChildContainer = styled.div`\nmargin: ${pxToRem(10)};\ndisplay: flex;\nflex-direction: column;\nalign-content: center;\nalign-items: center;\njustify-content: center;\npadding: ${pxToRem(10)};\n`\n\nconst Unauthorized = () => {\n\n    return (\n            <Body>\n                <Container>\n                    <ChildContainer>\n                        <H1\n                            content=\"403\"\n                            color={`${colors.secondary}`}\n                            fontSize={`${pxToRem(140)}`}\n                            margin=\"0\"/>\n                        <Text\n                            content=\"Vous n'êtes pas autorisé à accèder à cette ressource\"/>\n                        <LinkButton\n                            link=\"/\"\n                            content=\"Retour à l'accueil\"/>\n                        <LinkButton\n                            link=\"/creer-mon-compte\"\n                            content=\"S'inscrire\"/>\n                    </ChildContainer>\n                    <ChildContainer>\n                        <ImgErr\n                            src=\"images/basket-full-vegetables.jpg\"\n                            alt=\"panier de légumes\"\n                        />\n                    </ChildContainer>\n                </Container>\n            </Body>\n    )\n}\n\nexport default Unauthorized;","/home/virgile/mpp/src/Pages/Legals.jsx",[],[],"/home/virgile/mpp/src/Pages/AdminPage.jsx",[],[],"/home/virgile/mpp/src/Config/baseUrl.js",[],[],"/home/virgile/mpp/src/Components/GoToTopButton/index.js",[],[],"/home/virgile/mpp/src/Components/Footer/index.jsx",[],[],"/home/virgile/mpp/src/Components/Navbar/index.jsx",["322"],[],"import React, {useContext, useEffect} from 'react';\nimport {authContext} from '../../Components/Contexts'\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport Logo from '../../Components/Logo';\nimport colors from '../../Config/theme/colors';\nimport fonts from '../../Config/theme/fonts';\nimport {NavLink, useNavigate} from 'react-router-dom';\n// import axios from 'axios';\n// import BASEURL from '../../Config/baseUrl'\nimport styled from 'styled-components';\nimport pxToRem from '../../Services/pxToRem';\n\nconst pages = [\n  {id: 1, name: 'Accueil', link: '/'},\n  {id: 2, name: 'Calendrier de plantation', link: '/calendrier'}\n];\n\nconst NavLinkDesk = styled(NavLink).attrs((/* props */) => ({ tabIndex: 0 }))`\n    margin: 3rem 0rem 3rem 2.5rem;\n    padding: 1rem 0rem;\n    color: ${colors.primary}; \n    text-decoration: none; \n    font-size: ${fonts.size.itemMenu}; \n\n    &:hover{ \n      color: ${colors.secondary};\n      background: \"none\";\n    }\n\n    &.active{\n      border-bottom: ${pxToRem(4)} solid;\n      border-color: ${colors.secondary};\n    }\n  `;\n\nconst NavLinkProfil = styled(NavLink).attrs(() => ({ tabIndex: 0 }))`\n  margin-right:${pxToRem(25)};\n  padding: 1rem 0;\n  color: ${colors.primary}; \n  text-decoration: none; \n  font-size: ${fonts.size.itemMenu};\n\n  &:hover{ \n    color: ${colors.secondary};\n    background: \"none\";\n  }\n\n  &.active{\n    border-bottom: ${pxToRem(4)} solid;\n    border-color: ${colors.secondary};\n  }\n`;\n\nconst Navbar = () => {\n  const navigate = useNavigate()\n  const { auth, resetContextData } = useContext(authContext);\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\n  const name = localStorage.getItem('name');\n  const role = localStorage.getItem('role');\n  // const token = localStorage.getItem('token');\n  const handleOpenNavMenu = (event) => {\n    setAnchorElNav(event.currentTarget);\n  };\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  // const handleCloseUserMenu = () => {\n  //   setAnchorElUser(null);\n  // };\n\n  const logOut = () => {\n    resetContextData();\n    navigate('/')\n  }\n\n  // const goToAdminpage = async () => {\n  //   const id = localStorage.getItem('id');\n  //   const token = localStorage.getItem('token');\n  //   await axios.get(`${BASEURL}/users/${id}`, \n  //   {\n  //     id: id\n  //   }, \n  //   {headers: {'Authorization': `Bearer ${token}`}}).then((res) => {\n  //         if(res.data.user.role === \"admin\"){\n  //       navigate('/back-office')\n  //   }else {\n  //     navigate(\"/\")\n  //   }\n  //   })\n  // }\n\n  useEffect(() => {\n  }, [auth])\n\n  return (\n    <AppBar position=\"static\" style={{ background: '#FFFFFF', paddingTop:'0.5rem', paddingBottom: 'o.5rem'}} >\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n        <Typography sx={{ display: { xs: 'none', md: 'flex' } }}>\n          <Logo />\n        </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color= \"default\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n\n              {pages.map((page) => (\n                  <MenuItem key={page.id} onClick={handleCloseNavMenu}>\n                    <NavLink to={page.link} end\n                            key={page.id}\n                            style={({ isActive }) => ({\n                              color: isActive ? colors.secondary : colors.primary,\n                              textDecoration:'none',\n                      })}>\n                     {page.name}\n                    </NavLink>\n                  </MenuItem>\n                ))}\n                  <MenuItem onClick={handleCloseNavMenu}>\n                    {auth?.user?.role === \"user\" || role === \"user\" ?  \n                        <NavLink to=\"/mon-potager\" end\n                        style={({ isActive }) => ({\n                          color: isActive ? colors.secondary : colors.primary,\n                          textDecoration:'none',\n                        })}>\n                            Mon potager\n                        </NavLink>\n                        : \n                        null\n                    }\n                  </MenuItem>\n            </Menu>\n          </Box>\n          <Typography  sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <Logo />\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <NavLinkDesk\n                to={page.link} end\n                key={page.id}\n              >\n                {page.name}\n              </NavLinkDesk>\n            ))}\n            {auth?.user?.role === \"user\" || role === \"user\" ?\n                <NavLinkDesk to=\"/mon-potager\" end >\n                    Mon potager\n                </NavLinkDesk>\n                : \n                null\n            }\n          </Box>\n\n          <Box sx={{ flexGrow: 0 , display:'flex', alignItems:'baseline'}}>\n            <Tooltip title=\"Mon profil\" >\n\n              { name ?\n                <NavLinkProfil to=\"/mon-profil\" >\n                  <Box sx={{textAlign:'center'}}>\n                    <img src=\"/images/avatar.png\" alt=\"\"/>\n                  </Box>\n                  {name}\n                </NavLinkProfil>\n\n              :      \n              <NavLink to=\"/connexion\" disableripple onClick={handleOpenUserMenu} sx={{ p: 0, \"&:hover\":{ background: \"none\" } }}>\n                <Typography sx={{ color: colors.primary, ml: 1 }}>Se connecter / Créer un compte</Typography>\n              </NavLink>\n              }\n            </Tooltip>\n\n            {auth?.user?.role === \"admin\" || role === \"admin\" ? \n                <NavLinkDesk to=\"/back-office\" end >Back office</NavLinkDesk> \n                : \n                null\n            }\n\n            {name && <Button sx={{color: colors.secondary, p:0, display:'flex', ml:6}} onClick={logOut}>Déconnexion<LogoutIcon sx={{cursor:\"pointer\", ml:1, color: colors.primary}}/></Button>}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nexport default Navbar;","/home/virgile/mpp/src/Config/theme/fonts.js",[],[],"/home/virgile/mpp/src/Config/theme/image_size.js",[],[],"/home/virgile/mpp/src/Config/theme/breakpoint_mobile.js",[],[],"/home/virgile/mpp/src/Config/theme/styles.js",[],[],"/home/virgile/mpp/src/Services/pxToRem.js",[],[],"/home/virgile/mpp/src/Config/theme/colors.js",[],[],"/home/virgile/mpp/src/Components/ImgTop/index.js",[],[],"/home/virgile/mpp/src/Components/PlantDetail/index.js",["323"],[],"import React from 'react';\nimport styled from 'styled-components'\nimport pxToRem from '../../Services/pxToRem'\nimport H1 from '../H1'\nimport Text from '../Text'\n//import Button from '@mui/material/Button'\nimport Button from '../Button';\nimport RedButton from '../RedButton';\nimport Styles from '../../Config/theme/styles';\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\nwidth: 100%;\nheight: fit-content;\ndisplay: flex;\nflex-direction: column;\nalign-content: center;\nalign-items: center;\njustify-content: center;\n`\nconst ChildContainer = styled.div`\nwidth: 80%;\ndisplay: flex;\njustify-content: center;\nmargin-bottom: ${Styles.margin.lg};\n`\nconst StyledImg = styled.img`\nborder-radius: ${Styles.radius.md};\nwidth: ${pxToRem(150)};\nheight: ${pxToRem(150)};\nobject-fit: cover;\nbox-shadow: ${Styles.boxShadow.md};\n`\nconst GrandChild = styled.div`\nmargin: ${Styles.margin.nm};\npadding: ${Styles.padding.nm};\n`\nconst Ul = styled.div`\nwidth: 100%;\n`\nconst Li = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: space-around;\n`\nconst Hr = styled.hr`\nwidth: 100%;\nsize: 1px;\n`\nconst Action = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: space-around;\n`\n\nconst DetailPlant = (props) => {\n\n    const {plant, userId, addPlant, deletePlant, userPlants} = props;\n\n    const defaultImg = 'https://decizia.com/blog/wp-content/uploads/2017/06/default-placeholder.png';\n\n    const capitalize = (str) => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n   \n    if (!plant) return null;\n\n    return (\n            <Container>\n\n                <H1\n                    content={capitalize(plant.name)}/>\n                <ChildContainer>\n\n                    <StyledImg\n                        src={plant.image_url  ? plant.image_url  : defaultImg}\n                        alt={plant.name}/>\n\n                    <GrandChild>\n                        <Text\n                            content={\"Catégorie : \" + plant.category_name}/>\n                        <Text\n                            content={\"Semis : de \" + plant.start_sowing_month + \" à \" + plant.end_sowing_month}/>\n                        <Text\n                            content={\"Récolte : de \" + plant.start_harvest_month +\" à \"+ plant.end_harvest_month}/>\n                    </GrandChild>\n\n                </ChildContainer>\n\n                <ChildContainer>\n                    <Text\n                        content={plant.description}/>\n                </ChildContainer>\n\n                <ChildContainer>\n\n                    <Ul>\n                        <Hr/>\n\n                        <Li>\n                            <Text\n                                content=\"Densité\"/>\n                            <Text\n                                content={\"Semez \" + plant.density + \" plants par m2\"}/>\n                        </Li>\n\n                        <Hr/>\n\n                        <Li>\n                            <Text\n                                content=\"Quantité d'eau\"/>\n                            <Text\n                                content={\"Arrosez \" + plant.water_quantity + \" fois par semaine\"}/>\n                        </Li>\n\n                        <Hr/>\n\n                            {userId && \n                            <Action>\n                                <Button\n                                content=\"Ajouter\"\n                                onClick={() => addPlant(plant.id)} />\n\n                                {userPlants.map((element) => {\n                                            if (plant.id === element.plant_id) {\n                                                return <RedButton\n                                                content=\"Supprimer\"\n                                                onClick={() => deletePlant(plant.id)}/>\n                                            }\n                                        })\n                                    }\n                                \n                            </Action>\n                            }\n                    </Ul>\n\n                </ChildContainer>\n            </Container>\n    )\n}\n\nDetailPlant.propTypes = {\n    plant: PropTypes.object.isRequired\n}\n\nexport default DetailPlant;","/home/virgile/mpp/src/Components/H1/index.js",[],[],"/home/virgile/mpp/src/Components/SignIn/index.js",["324","325","326","327"],[],"import React, {useEffect, useState, useContext} from 'react';\nimport {Link, useNavigate} from 'react-router-dom';\nimport { authContext } from '../Contexts';\nimport baseUrl from '../../Config/baseUrl'\nimport axios from 'axios';\nimport ThemeColors from '../../Config/theme/colors'\nimport Theme from '../../Config/theme/styles'\nimport pxToRem from '../../Services/pxToRem'\nimport {TextField} from '@mui/material';\nimport Button from '../Button'\nimport Text from '../Text'\nimport SignCard from '../SignCard'\nimport H1 from '../H1'\nimport styled from 'styled-components'\nimport getLoginToken from '../../Services/login'\nimport getAuth from '../../Services/getAuth'\n\nconst StyledSignContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 500px;\n    height: 400px;\n    margin: 0 auto;\n`\nconst StyledContentSignContainer = styled.div`\n    min-width: 40%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    background-color: ${ThemeColors.secondary}\n`\n\nconst StyledLink = styled.a`\n    max-width: ${pxToRem(200)};\n    align-self:center;\n    padding: ${Theme.padding.sm} ${Theme.padding.lg};\n    text-decoration: none;\n    color: white;\n    border: ${Theme.border.sm} solid white;\n    border-radius: ${Theme.radius.lg};\n    font-size:${pxToRem(20)};\n    margin-bottom: ${pxToRem(25)};\n\n    &:hover {\n        background-color: ${ThemeColors.tertiary};\n        border: ${Theme.border.sm} solid ${ThemeColors.tertiary};\n    }\n`\n\nconst SignIn = () => {\n    const navigate = useNavigate();\n    // const {user, setUser} = useContext(UserContext)\n    const {auth, setTokenToContext,  SetUserIsLog} = useContext(authContext);\n    const {user, setUserDataToContext} = useContext(authContext);\n    const [error, setError] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const handleEmailChange = (e) => {\n        const email = e.target.value;\n        setEmail(email);\n    }\n\n    const handlePasswordChange = (e) => {\n        const password = e.target.value;\n        setPassword(password);\n    }\n\n    const login = async () => {\n\n        try {\n            if( email === '' || password === ''){\n                setError('Les informations ne correspondent pas')\n            }\n            const getToken = await getLoginToken(email, password)\n            const token = getToken.data.token;\n            const user = await getAuth(token)\n            if(user){\n                setTokenToContext(user.data.token);\n                SetUserIsLog(true);\n                setUserDataToContext(user.data.authData, user.data.token)\n            }\n\n            setEmail('');\n            setPassword('');\n            if(user.data.authData.role === \"admin\"){\n                navigate('/back-office', {user: user.data.authData});\n            } else {\n\n                navigate('/mon-potager', user.data.authData);\n            }\n        } catch(error) {\n            console.log(error)\n        }\n\n    }\n    useEffect(() => {\n\n    }, [])\n\n    return(\n        <SignCard>\n            <StyledContentSignContainer>\n                <H1 content=\"Rejoignez nous \" />\n                <Text content = \"Créez votre compte et commencez à utiliser nos services\" />\n                <StyledLink href=\"/creer-mon-compte\"> Créer mon compte !</StyledLink>\n            </StyledContentSignContainer>\n            <StyledSignContainer>\n                <H1 content=\"Connexion à mon compte\"/>\n                \n                <TextField\n                required\n                id=\"email_outlined-required\"\n                label=\"Email\"\n                defaultValue={email}\n                helperText={error ? error : ''}\n                onChange={handleEmailChange}\n                error={error ? true : false}\n                \n                />\n                <TextField\n                required\n                id=\"password_outlined-required\"\n                label=\"Mot de passe\"\n                type=\"password\"\n                helperText={error ? error : ''}\n                error={error ? true : false}\n                defaultValue={password}\n                onChange={handlePasswordChange}\n                />\n                <Button \n                    content=\"se connecter\"\n                    onClick={() => { \n                        login()\n                    }}\n                />\n\n                <Link to=\"/creer-mon-compte\" sx={{margin:\"0 auto\"}}>Je n'ai pas encore de compte</Link>\n\n            </StyledSignContainer>\n        </SignCard>\n    )\n}\n  \nexport default SignIn;","/home/virgile/mpp/src/Components/H3/index.js",[],[],"/home/virgile/mpp/src/Components/H2/index.js",[],[],"/home/virgile/mpp/src/Components/Text/index.js",[],[],"/home/virgile/mpp/src/Components/SignUp/index.js",["328"],["329"],"import React, {useEffect, useState} from 'react';\nimport {Link, useNavigate} from 'react-router-dom';\nimport baseUrl from '../../Config/baseUrl'\nimport axios from 'axios';\nimport pxToRem from '../../Services/pxToRem'\nimport TextField from '@mui/material/TextField';\nimport ThemeColors from '../../Config/theme/colors'\nimport Theme from '../../Config/theme/styles'\nimport SignCard from '../SignCard';\nimport Text from '../Text';\nimport Button from '../Button'\nimport H1 from '../H1'\nimport styled from 'styled-components'\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst StyledSignContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 400px;\n    margin: 0 auto;\n    flex-direction: column;\n`\n\nconst StyledContentSignContainer = styled.div`\n    min-width: 40%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    vertical-align:center;\n    text-align: center;\n    background-color: ${ThemeColors.secondary};\n`\n\nconst StyledLink = styled.a`\n    max-width: ${pxToRem(200)};\n    align-self:center;\n    padding: ${Theme.padding.sm} ${Theme.padding.lg};\n    text-decoration: none;\n    color: white;\n    border: ${Theme.border.sm} solid white;\n    border-radius: ${Theme.radius.lg};\n    font-size:${pxToRem(20)};\n    margin-bottom: ${pxToRem(25)};\n\n    &:hover {\n        background-color: ${ThemeColors.tertiary};\n        border: ${Theme.border.sm} solid ${ThemeColors.tertiary};\n    }\n\n`\nconst SignUp = () => {\n    const navigate = useNavigate();\n    const [openSnack, setOpenSnack] = useState(false)\n    const [error, setError] = useState('')\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    // eslint-disable-next-line no-unused-vars\n    const [emailError, setEmailError] = useState('')\n    const [password, setPassword] = useState('')\n    const [passwordConfirmation, setPasswordConfirmation] = useState('')\n\n    const handleClick = () => {\n        setOpenSnack(true);\n      };\n\n    const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n        return;\n    }\n\n    setOpenSnack(false);\n    };\n    const handleNameChange = (e) => {\n        const name = e.target.value;\n        setName(name);\n    }\n\n    const handleEmailChange = (e) => {\n        const email = e.target.value;\n        setEmail(email);\n    }\n\n    const handlePasswordChange = (e) => {\n        const password = e.target.value;\n        setPassword(password);\n    }\n\n    const handlePasswordConfirmationChange = (e) => {\n        const passwordConfirmation = e.target.value;\n        setPasswordConfirmation(passwordConfirmation);\n    }\n\n    const action = (\n        <React.Fragment>\n          <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            UNDO\n          </Button>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </React.Fragment>\n      );\n\n      const passwordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{6,20})/;\n\n     const createAccount = async () => {\n        try {\n            if(password === '' || email === '' || passwordConfirmation === ''){\n                setError('Tout les champs sont obligatoires')\n            }\n            if(!passwordRegex.test(password)){\n                setError(\"Les mots de passe doivent contenir 1 majuscule, minimum 8 caractere dont 1 special (ex: &!?@)\")\n                return\n                \n            }else {\n                if(password !== passwordConfirmation){\n                    setError(\"Les mots de passe ne correspondent pas\")\n                    return\n                }\n                const request = await axios.post(`${baseUrl}/users/create`, {\n                    name,\n                    email,\n                    password,\n                })\n                setName('');\n                setEmail('');\n                setPassword('');\n                handleClick()\n                setTimeout(() => navigate('/connexion'), \"2000\")\n            }\n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    useEffect(() => {\n\n    }, [])\n\n    return(\n        \n        <SignCard>\n            <StyledSignContainer>\n                <H1 content=\"Création d'un compte\"/>\n                <TextField\n                required\n                id=\"name_outlined-required\"\n                label=\"Votre prénom\"\n                defaultValue={name}\n                onChange={handleNameChange}\n                error={emailError ? true : false}\n                Link\n                />\n                <TextField\n                required\n                id=\"email_outlined-required\"\n                label=\"Email\"\n                type=\"mail\"\n                defaultValue={email}\n                onChange={handleEmailChange}\n                error={emailError ? true : false}\n                Link\n                />\n                <TextField\n                required\n                id=\"password_outlined-required\"\n                label=\"Mot de passe\"\n                type=\"password\"\n                error={error ? true : false}\n                helperText={error ? error : ''}\n                defaultValue={password}\n                onChange={handlePasswordChange}\n                />\n\n                <TextField\n                required\n                id=\"confirmPassword_outlined-required\"\n                label=\"Confirmation du mot de passe\"\n                type=\"password\"\n                error={error ? true : false}\n                helperText={error ? error : ''}\n                defaultValue={password}\n                onChange={handlePasswordConfirmationChange}\n                />\n                <Button \n                    content=\"s'inscrire\"\n                    onClick={createAccount}\n                />\n\n                <Link to=\"/connexion\"> J'ai déja un compte</Link>\n            </StyledSignContainer>\n            <StyledContentSignContainer>\n                <H1 content=\"Salut !\" />\n                <Text content = \"Vous possedez un compte, ne perdez pas de temps\" />\n                <StyledLink href=\"/connexion\"> Je me connecte !</StyledLink>\n            </StyledContentSignContainer>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n                action={action}\n            >\n                <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\n                Vous pouvez maintenant vous connecter\n                </Alert>\n            </Snackbar>\n        </SignCard>\n    )\n}\n\nexport default SignUp;\n","/home/virgile/mpp/src/Components/SearchBar/index.js",[],[],"/home/virgile/mpp/src/Components/PlantsList/index.js",["330"],[],"import React, { useState }  from 'react';\nimport { slice } from 'lodash';\nimport ImgCal from '../ImgCal';\nimport AddButton from '../AddButton';\nimport DeleteButton from '../DeleteButton';\nimport { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\nimport styled from 'styled-components';\nimport pxToRem from '../../Services/pxToRem';\n\nconst PictoCat = styled.img`\n    width:${pxToRem(25)};\n    height:auto;\n    margin-right:${pxToRem(15)};\n`;\n\nconst MonthsEnum = {\n    janvier: 1,\n    fevrier: 2,\n    mars: 3,\n    avril: 4,\n    mai: 5,\n    juin: 6,\n    juillet: 7,\n    aout: 8,\n    septembre: 9,\n    octobre: 10,\n    novembre: 11,\n    decembre: 12\n};\n\nconst capitalize = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst PlantsList = (props) => {\n    const [isCompleted, setIsCompleted] = useState(false)\n    const [index, setIndex] = useState(5)\n    const {plants, getPlant, userId, addPlant, deletePlant, userPlants} = props;\n\n    if (!plants) return null;\n\n    // For Load More Button\n    const initialPlants = slice(plants, 0, index)\n    const loadMore = () => {\n    setIndex(index + 5)\n        if (index >= plants.length) {\n            setIsCompleted(true)\n        } else {\n            setIsCompleted(false)\n        }\n    }\n\n    // let checks = 0;\n\n    return (\n        <div className = \"calendar\" sx={{ overflow: 'hidden' }}>\n        <TableContainer  sx={{ minWidth: 650, minHeight: 682, maxHeight: 900 }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>J</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>F</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>M</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>A</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>M</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>J</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>J</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>A</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>S</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>O</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>N</TableCell>\n                        <TableCell align=\"center\" sx={{fontWeight:\"bold\"}}>D</TableCell>\n                        <TableCell></TableCell>\n                    </TableRow>\n                </TableHead>\n\n                {initialPlants.map((plant) => (\n                    <TableBody key={plant.id}>\n                        <TableRow >\n                            <TableCell rowSpan={2}>\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                    <PictoCat src={\"images/category_\"+plant.category_id+\".png\"}/>\n                                    <ImgCal src={plant.image_url} />\n                                    <Typography sx={{ml:3}} variant=\"h6\">{capitalize(plant.name)}</Typography>\n                                </Box>\n                            </TableCell>\n\n                            {months.map((month) => {\n\n                                const sowingStart = MonthsEnum[plant.start_sowing_month];\n                                const sowingEnd = MonthsEnum[plant.end_sowing_month];\n\n                                if (sowingStart <= month && sowingEnd >= month)\n                                    return <TableCell sx={{px:0, position:'relative'}} key={month}><div className=\"sowing\"></div></TableCell>\n\n                                return <TableCell key={month}></TableCell>\n                            })}\n\n                            <TableCell rowSpan={2} sx={{ textAlign: 'center' }}>\n                                <Box sx={{ display: 'flex', justifyContent:'center', alignItems: 'center', mt: 1 }}>\n                                    <Button content=\"Voir\"\n                                        onClick={() => getPlant(plant.id)}/>\n                                </Box>\n                                {userId && \n                                    <Box sx={{ display: 'flex', justifyContent:'center', alignItems: 'center', mt: 1 }}>\n\n                                    <AddButton\n                                        content=\"-\"\n                                        alt=\"Ajouter\"\n                                        title=\"Ajouter\"\n                                        onClick={() => addPlant(plant.id)} />\n\n                                    {/* {\n                                        userPlants.map((element) => {\n                                            if (plant.id !== element.plant_id) {\n                                                checks ++;\n                                                if(checks === userPlants.length) {\n                                                    return <AddButton\n                                                    content=\"-\"\n                                                    alt=\"Ajouter\"\n                                                    title=\"Ajouter\"\n                                                    onClick={() => addPlant(plant.id)} />\n                                                }\n                                            }\n                                        })\n                                    } */}\n                                    \n                                    {userPlants.map((element) => {\n                                            if (plant.id === element.plant_id) {\n                                                return <DeleteButton\n                                                    content=\"-\"\n                                                    alt=\"Supprimer\"\n                                                    title=\"Supprimer\"\n                                                    onClick={() => deletePlant(plant.id)} />\n                                            }\n                                        })\n                                    }\n                                </Box>\n                                }\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            {months.map((month) => {\n                                const harvestStart = MonthsEnum[plant.start_harvest_month];\n                                const harvestEnd = MonthsEnum[plant.end_harvest_month];\n\n                                if (harvestStart <= month && harvestEnd >= month)\n                                    return <TableCell sx={{px:0, position:'relative'}} key={month}><div className=\"harvest\"></div></TableCell>\n\n                                    return <TableCell key={month}></TableCell>\n                            })}\n                        </TableRow>\n                    </TableBody>\n                ))}\n\n            </Table>\n        </TableContainer>\n\n        <Box sx={{display:'flex', justifyContent:'center'}}>\n        {isCompleted ? (\n        <Button content=\"FIN\" onClick={loadMore} />\n        ) : (\n        <Button content=\"Voir +\" onClick={loadMore} />\n        )}\n        </Box>\n        </div>\n    )\n}\n\nPlantsList.propTypes = {\n    plants: PropTypes.array.isRequired\n}\n\nexport default PlantsList;","/home/virgile/mpp/src/Components/FilterRegion/index.js",[],[],"/home/virgile/mpp/src/Components/CreateGardenForm/index.js",["331"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'\nimport TextField from '@mui/material/TextField';\nimport styles from '../../Config/theme/styles';\nimport colors from '../../Config/theme/colors';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport axios from \"axios\";\nimport baseUrl from '../../Config/baseUrl';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Button from '../Button'\n\nconst Container = styled.div`\nwidth: 100%;\nheight: fit-content;\ndisplay: flex;\nflex-direction: column;\nalign-content: center;\nalign-items: center;\njustify-content: center;\n`;\nconst ChildContainer = styled.div`\nwidth: 80%;\ndisplay: flex;\njustify-content: center;\nmargin-bottom: ${styles.margin.lg};\n`;\n\nconst StyledButton = styled.button`\nwidth: ${styles.width.fitcontent};\nbackground-color: ${colors.secondary};\nborder-radius: ${styles.radius.lg};\ntext-transform: ${styles.textTransform.uppercase};\ntext-align: ${styles.textAlign.center};\npadding: ${styles.padding.sm} ${styles.padding.lg};\nborder: ${styles.border.none};\ncursor: pointer;\ndisplay: block;\nmargin: ${styles.margin.md} ${styles.margin.auto};\n\n&:hover {\n    color: ${colors.neutral};\n    background-color: ${colors.tertiary};\n}\n`;\nconst CreateGardenForm = (props) => {\n\n    const { userId } = props;\n    const token = localStorage.getItem('token');\n    const [regions, setRegions] = useState([]);\n    const [region, setRegion] = useState('');\n    const [name, setName] = useState('');\n    const [area, setArea] = useState('');\n    const [error, setError] = useState('');\n    const [openSnack, setOpenSnack] = useState(false);\n\n    const handleClick = () => {\n        setOpenSnack(true);\n      };\n\n    const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n        return;\n    }\n\n    setOpenSnack(false);\n    };\n\n    const action = (\n        <React.Fragment>\n          <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            UNDO\n          </Button>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </React.Fragment>\n      );\n\n    const handleInputName = evt => {\n        setName(evt.target.value);\n    };\n\n    const handleInputArea = evt => {\n        setArea(evt.target.value);\n    };\n\n    const handleSelect = evt => {\n        setRegion(evt.target.value);\n    };\n\n    const getRegions = () => {\n        try {\n            axios.get(baseUrl + \"/regions\").then((res) => {\n                setRegions(res.data);\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const createGarden = async (evt) => {\n        evt.preventDefault();\n        try {\n            if (name === '' || area === '' || region === ''){\n                setError('Tous les champs sont obligatoires')\n            }\n                axios.post(baseUrl + \"/gardens/create\", {\n                    name: name,\n                    area: area,\n                    regionId: region,\n                    userAccountId: userId\n                },\n                {headers: { 'Authorization': `Bearer ${token}` }}\n                );\n                handleClick();\n                handleClose();\n                setTimeout(function(){\n                    window.location.reload();\n                }, 2000);\n\n        } catch (error) {\n            setError(error.response.status)\n            console.error(error);\n            if(error.response.status === 400){\n                return \"Votre potager n'a pas été créé\"\n            }\n\n            if(error.response.status === 409){\n                return \"Un potager ayant ce nom existe déjà. Veuillez choisir un autre nom.\"\n            }\n        }\n    }\n\n    useEffect(() => {\n        getRegions();\n    }, [])\n\n    return (\n        <Container>\n            <ChildContainer>\n                <form \n                    component=\"form\"\n                    style={{ display: 'flex', flexDirection: 'column' }}>\n                    <TextField sx={{ margin: 2 }} onChange={handleInputName} type=\"text\" id=\"name\" label=\"Nom du potager\" variant=\"outlined\" />\n                    <TextField sx={{ margin: 2 }} onChange={handleInputArea} type=\"number\" id=\"area\" label=\"Superficie\" variant=\"outlined\" />\n\n                    {regions &&\n                        <FormControl sx={{ margin: 2 }}>\n                            <InputLabel id=\"demo-simple-select-label\">Région</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                value={region}\n                                label=\"Région\"\n                                onChange={handleSelect}\n                            >\n\n                                {regions.map((region) => (\n                                    <MenuItem key={region.id} value={region.id}>{region.name}</MenuItem>\n                                ))};\n\n                            </Select>\n                        </FormControl>\n                    }\n\n                    <StyledButton\n                        variant=\"contained\"\n                        onClick={createGarden}\n                    >\n                        Créer\n                    </StyledButton>\n                </form>\n            </ChildContainer>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n                action={action}\n            >\n                <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\n                Votre potager a été créé !\n                </Alert>\n            </Snackbar>\n        </Container >\n    )\n}\n\nexport default CreateGardenForm;","/home/virgile/mpp/src/Components/PlantsListMobile/index.js",["332"],[],"import React, { useState }  from 'react';\nimport { slice } from 'lodash';\nimport { Box, Typography } from '@mui/material';\nimport Text from '../Text'\nimport ImgCal from '../ImgCal';\nimport AddButton from '../AddButton';\nimport DeleteButton from '../DeleteButton';\nimport Button from '../Button';\nimport LinkButton from '../LinkButton';\nimport { styled } from '@mui/material/styles';\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport PropTypes from 'prop-types';\nimport Styled from 'styled-components';\nimport pxToRem from '../../Services/pxToRem';\n\nconst PictoCat = Styled.img`\n    width:${pxToRem(25)};\n    height:auto;\n    margin-right:${pxToRem(15)};\n`;\n\n// For accordion\nconst Accordion = styled((props) => (\n  <MuiAccordion disableGutters elevation={0} square {...props} />\n))(({ theme }) => ({\n  border: `1px solid ${theme.palette.divider}`,\n  '&:not(:last-child)': {\n    borderBottom: 0,\n  },\n  '&:before': {\n    display: 'none',\n  },\n  borderLeft: 'none',\n  borderRight: 'none',\n\n}));\n\nconst AccordionSummary = styled((props) => (\n  <MuiAccordionSummary\n    expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\n    {...props}\n  />\n))(({ theme }) => ({\n  flexDirection: 'row-reverse',\n  '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n    transform: 'rotate(90deg)',\n  },\n  '& .MuiAccordionSummary-content': {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: '1px solid rgba(0, 0, 0, .125)',\n}));\n\n// Capitalize plants name\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst PlantsListMobile = (props) => {\n\n    const [isCompleted, setIsCompleted] = useState(false)\n    const [index, setIndex] = useState(5)\n    const [expanded, setExpanded] = React.useState('');\n\n    const handleChange = (panel) => (event, newExpanded) => {\n        setExpanded(newExpanded ? panel : false);\n    };\n\n    // For list of plants\n    const {plants, userId, addPlant, deletePlant, userPlants} = props;\n\n      if (!plants) return null;\n\n    // For Load More Button\n    const initialPlants = slice(plants, 0, index)\n    const loadMore = () => {\n    setIndex(index + 5)\n        if (index >= plants.length) {\n            setIsCompleted(true)\n        } else {\n            setIsCompleted(false)\n        }\n    }\n\n  return (\n    <div className='calendarMobile'>\n        {initialPlants.map((plant) => (\n        <Accordion expanded={expanded === 'panel' + plant.id} key={'panel1'+ plant.id} onChange={handleChange('panel'+ plant.id)}>\n            <AccordionSummary aria-controls=\"panel1d-content\" id={'panel1'+ plant.id+'header'}>\n               <Box sx={{ ml:2, display: 'flex', alignItems: 'center' }}>\n                    <PictoCat src={\"images/category_\"+plant.category_id+\".png\"}/>\n                    <ImgCal src={plant.image_url} />\n                    <Typography sx={{ml:3}} variant=\"h6\">{capitalize(plant.name)}</Typography>\n                </Box>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Box sx={{ margin: 1, display:'flex', justifyContent: 'space-between' }}>\n                    <Box>\n                        <Text\n                            content={\"Catégorie : \" + plant.category_name}/>\n                        <Text\n                            content={\"Semis : de \" + plant.start_sowing_month + \" à \" + plant.end_sowing_month}/>\n                        <Text\n                            content={\"Récolte : de \" + plant.start_harvest_month +\" à \"+ plant.end_harvest_month}/>\n                        <Typography sx={{fontWeight: 'bold', mt:3}}>Description</Typography>\n                        <Text margin='0 0 1.2rem 0'\n                            content = {plant.description} />\n                        <LinkButton\n                            content = 'Consulter'\n                            link={`/calendrier/${plant.id}`}\n                        />\n                    </Box>\n                    {userId && \n                    <Box>\n                        <AddButton\n                            content=\"-\"\n                            alt=\"Ajouter\"\n                            title=\"Ajouter\"\n                            onClick={() => addPlant(plant.id)} />\n                        \n                        {userPlants.map((element) => {\n                          if (plant.id === element.plant_id) {\n                            return <DeleteButton\n                              content=\"-\"\n                              alt=\"Supprimer\"\n                              title=\"Supprimer\"\n                              onClick={() => deletePlant(plant.id)} />\n                            }\n                          })\n                        }\n                    </Box>\n                    }\n                </Box>\n            </AccordionDetails>\n        </Accordion>\n        ))}\n         <Box sx={{display:'flex', justifyContent:'center'}}>\n            {isCompleted ? (\n            <Button content=\"FIN\" onClick={loadMore} />\n            ) : (\n            <Button content=\"Voir +\" onClick={loadMore} />\n            )}\n        </Box>\n    </div>\n  )\n}\n\nPlantsListMobile.propTypes = {\n  plants: PropTypes.array.isRequired\n}\n\nexport default PlantsListMobile;\n","/home/virgile/mpp/src/Components/Filter/index.js",[],[],"/home/virgile/mpp/src/Components/Button/index.jsx",[],[],"/home/virgile/mpp/src/Components/GardenPlantsList/index.js",[],[],"/home/virgile/mpp/src/Components/RedButton/index.jsx",[],[],"/home/virgile/mpp/src/Components/GardenPlantsListMobile/index.js",["333","334"],[],"import React, { useState }  from 'react';\nimport { slice } from 'lodash';\nimport { Box, Typography } from '@mui/material';\nimport Text from '../Text'\nimport ImgCal from '../ImgCal';\nimport AddButton from '../AddButton';\nimport DeleteButton from '../DeleteButton';\nimport Button from '../Button';\nimport LinkButton from '../LinkButton';\nimport { styled } from '@mui/material/styles';\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport PropTypes from 'prop-types';\nimport Styled from 'styled-components';\nimport pxToRem from '../../Services/pxToRem';\n\nconst PictoCat = Styled.img`\n    width:${pxToRem(25)};\n    height:auto;\n    margin-right:${pxToRem(15)};\n`;\n\n// For accordion\nconst Accordion = styled((props) => (\n  <MuiAccordion disableGutters elevation={0} square {...props} />\n))(({ theme }) => ({\n  border: `1px solid ${theme.palette.divider}`,\n  '&:not(:last-child)': {\n    borderBottom: 0,\n  },\n  '&:before': {\n    display: 'none',\n  },\n  borderLeft: 'none',\n  borderRight: 'none',\n\n}));\n\nconst AccordionSummary = styled((props) => (\n  <MuiAccordionSummary\n    expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\n    {...props}\n  />\n))(({ theme }) => ({\n  flexDirection: 'row-reverse',\n  '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n    transform: 'rotate(90deg)',\n  },\n  '& .MuiAccordionSummary-content': {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: '1px solid rgba(0, 0, 0, .125)',\n}));\n\n// Capitalize plants name\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst PlantsListMobile = (props) => {\n\n    const [isCompleted, setIsCompleted] = useState(false)\n    const [index, setIndex] = useState(5)\n    const [expanded, setExpanded] = React.useState('');\n\n    const handleChange = (panel) => (event, newExpanded) => {\n        setExpanded(newExpanded ? panel : false);\n    };\n\n    // For list of plants\n    const {plants, userId, addPlant, deletePlant} = props;\n\n      if (!plants) return null;\n\n    // For Load More Button\n    const initialPlants = slice(plants, 0, index)\n    const loadMore = () => {\n    setIndex(index + 5)\n        if (index >= plants.length) {\n            setIsCompleted(true)\n        } else {\n            setIsCompleted(false)\n        }\n    }\n\n  return (\n    <div className='calendarMobile'>\n        {initialPlants.map((plant) => (\n        <Accordion expanded={expanded === 'panel' + plant.id} key={'panel1'+ plant.id} onChange={handleChange('panel'+ plant.id)}>\n            <AccordionSummary aria-controls=\"panel1d-content\" id={'panel1'+ plant.id+'header'}>\n               <Box sx={{ ml:2, display: 'flex', alignItems: 'center' }}>\n                    <PictoCat src={\"images/category_\"+plant.category_id+\".png\"}/>\n                    <ImgCal src={plant.image_url} />\n                    <Typography sx={{ml:3}} variant=\"h6\">{capitalize(plant.name)}</Typography>\n                </Box>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Box sx={{ margin: 1, display:'flex', justifyContent: 'space-between' }}>\n                    <Box>\n                        <Text\n                            content={\"Catégorie : \" + plant.category_name}/>\n                        <Text\n                            content={\"Semis : de \" + plant.start_sowing_month + \" à \" + plant.end_sowing_month}/>\n                        <Text\n                            content={\"Récolte : de \" + plant.start_harvest_month +\" à \"+ plant.end_harvest_month}/>\n                        <Typography sx={{fontWeight: 'bold', mt:3}}>Description</Typography>\n                        <Text margin='0 0 1.2rem 0'\n                            content = {plant.description} />\n                        <LinkButton\n                            content = 'Consulter'\n                            link={`/calendrier/${plant.plant_id}`}\n                        />\n                    </Box>\n                    {userId && \n                    <Box>                       \n                        <DeleteButton\n                            content=\"-\"\n                            alt=\"Supprimer\"\n                            title=\"Supprimer\"\n                            onClick={() => deletePlant(plant.plant_id)} />\n                    </Box>\n                    }\n                </Box>\n            </AccordionDetails>\n        </Accordion>\n        ))}\n         <Box sx={{display:'flex', justifyContent:'center'}}>\n            {isCompleted ? (\n            <Button content=\"FIN\" onClick={loadMore} />\n            ) : (\n            <Button content=\"Voir +\" onClick={loadMore} />\n            )}\n        </Box>\n    </div>\n  )\n}\n\nPlantsListMobile.propTypes = {\n  plants: PropTypes.array.isRequired\n}\n\nexport default PlantsListMobile;\n","/home/virgile/mpp/src/Components/DeleteButton/index.js",[],[],"/home/virgile/mpp/src/Components/ImgErr/index.js",[],[],"/home/virgile/mpp/src/Components/LinkButton/index.jsx",[],[],"/home/virgile/mpp/src/Components/GardenPlantDetail/index.js",["335"],[],"import React from 'react';\nimport styled from 'styled-components'\nimport pxToRem from '../../Services/pxToRem'\nimport H1 from '../H1'\nimport Text from '../Text'\nimport RedButton from '../RedButton';\nimport Styles from '../../Config/theme/styles';\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\nwidth: 100%;\nheight: fit-content;\ndisplay: flex;\nflex-direction: column;\nalign-content: center;\nalign-items: center;\njustify-content: center;\n`\nconst ChildContainer = styled.div`\nwidth: 80%;\ndisplay: flex;\njustify-content: center;\nmargin-bottom: ${Styles.margin.lg};\n`\nconst StyledImg = styled.img`\nborder-radius: ${Styles.radius.md};\nwidth: ${pxToRem(150)};\nheight: ${pxToRem(150)};\nobject-fit: cover;\nbox-shadow: ${Styles.boxShadow.xl};\n`\nconst GrandChild = styled.div`\nmargin: ${Styles.margin.nm};\npadding: ${Styles.padding.nm};\n`\nconst Ul = styled.div`\nwidth: 100%;\n`\nconst Li = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: space-around;\n`\nconst Hr = styled.hr`\nwidth: 100%;\nsize: 1px;\n`\nconst Action = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: center;\n`\n\nconst DetailPlant = (props) => {\n\n    const {plant, userId, addPlant, deletePlant} = props;\n\n    const defaultImg = 'https://decizia.com/blog/wp-content/uploads/2017/06/default-placeholder.png';\n\n    const capitalize = (str) => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n   \n    if (!plant) return null;\n\n    return (\n            <Container>\n\n                <H1\n                    content={capitalize(plant.name)}/>\n                <ChildContainer>\n\n                    <StyledImg\n                        src={plant.image_url  ? plant.image_url  : defaultImg}\n                        alt={plant.name}/>\n\n                    <GrandChild>\n                        <Text\n                            content={\"Catégorie : \" + plant.category_name}/>\n                        <Text\n                            content={\"Semis : de \" + plant.start_sowing_month + \" à \" + plant.end_sowing_month}/>\n                        <Text\n                            content={\"Récolte : de \" + plant.start_harvest_month +\" à \"+ plant.end_harvest_month}/>\n                    </GrandChild>\n\n                </ChildContainer>\n\n                <ChildContainer>\n                    <Text\n                        content={plant.description}/>\n                </ChildContainer>\n\n                <ChildContainer>\n\n                    <Ul>\n                        <Hr/>\n\n                        <Li>\n                            <Text\n                                content=\"Densité\"/>\n                            <Text\n                                content={\"Semez \" + plant.density + \" plants par m2\"}/>\n                        </Li>\n\n                        <Hr/>\n\n                        <Li>\n                            <Text\n                                content=\"Quantité d'eau\"/>\n                            <Text\n                                content={\"Arrosez \" + plant.water_quantity + \" fois par semaine\"}/>\n                        </Li>\n\n                        <Hr/>\n\n                            {userId && \n                            <Action>\n                                <RedButton\n                                content=\"Supprimer\"\n                                onClick={() => deletePlant(plant.id)}/>\n                            </Action>\n                            }\n                    </Ul>\n\n                </ChildContainer>\n            </Container>\n    )\n}\n\nDetailPlant.propTypes = {\n    plant: PropTypes.object.isRequired\n}\n\nexport default DetailPlant;","/home/virgile/mpp/src/Components/Admin/AdminTableUsers.js",["336"],[],"import React, {useEffect, useState} from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Divider from '@mui/material/Divider';\nimport pxToRem from '../../Services/pxToRem'\nimport styled from 'styled-components'\nimport Button from '../Button';\nimport RedButton from '../RedButton';\nimport H1 from '../H1';\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\nimport axios from 'axios';\nimport BASEURL from '../../Config/baseUrl';\nimport PropTypes from 'prop-types';\nimport { Box, Typography } from '@mui/material';\nimport styles from '../../Config/theme/styles';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\n\nconst StyledContainer = styled.div`\n    width: 50%;\n    margin: ${styles.margin.xxl} auto;\n    display:flex;\n    flex-direction:column;\n    padding:2%;\n    border-radius:50px;\n    box-shadow: ${styles.boxShadow.xl}\n`\nconst StyledBox = styled.div`\n    display:flex;\n    justify-content: space-between;\n    padding:1%;\n`\n\nconst AdminTableUsers = (props) => {\n    const token = localStorage.getItem('token');\n    const [userId, setUserId] = useState('');\n    const [users, setUsers] = useState();\n    const [selectedUser, setSelectedUser] = useState();\n    const [displayNewUser, setDisplayNewUser] = useState(false);\n    const [newUser, setNewUser] = useState({\n        name: '',\n        email: '',\n        role: '',\n        password: '',\n    })\n\n    const [errorNewUser, setErrorNewUser] = useState('');\n    const [confirmPass, setConfirmPass] = useState('');\n\n    const [openDialog, setOpenDialog] = useState(false);\n    const [openSnack, setOpenSnack] = useState(false)\n    const [message, setMessage] = useState('')\n    const [severity, setSeverity] = useState('')\n\n    const handleClose = () => {\n        setOpenSnack(false);\n    };\n\n    const getUsers = async () => {\n        try{\n            await axios.get(`${BASEURL}/users`, {headers: {'Authorization': `Bearer ${token}`}}).then((res) => {\n                setUsers(res.data);\n\n            });\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n    const handleOpenDialog = (id) => {\n        setUserId(id);\n        setOpenDialog(true);\n    }\n\n    const closeDialog = () => {\n        setOpenDialog(false);\n    }\n\n    // CREATE NEW USER \n    const handleNewUserName = (event) => {\n        setNewUser({...newUser, name: event.target.value});\n    };\n    const handleNewUserEmail = (event) => {\n        setNewUser({...newUser, email: event.target.value});\n    };\n    const handleNewUserRole = (event) => {\n        setNewUser({...newUser, role: event.target.value});\n    };\n    const handleNewUserPassword = (event) => {\n        setNewUser({...newUser, password: event.target.value});\n    };\n    const handleNewUserConfirmPass = (event) => {\n        setConfirmPass(event.target.value);\n    };\n// UPDATE USER\n    const handleUpdatedNameChange = (event) => {\n        setSelectedUser({...selectedUser, name: event.target.value});\n    };\n    const handleUpdatedEmailChange = (event) => {\n        setSelectedUser({...selectedUser, email: event.target.value});\n    };\n    const handleUpdatedRoleChange = (event) => {\n        setSelectedUser({...selectedUser, role: event.target.value});\n    };\n\n    const updateUser = (user) => {\n         axios.put(`${BASEURL}/users/${selectedUser.id}/update`, {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            role: user.role,\n        },\n        {headers: {\n            'Authorization' : `Bearer ${token}`\n        }\n        })\n        .then((res) => {\n            setMessage('Utilisateur mis à jour')\n            setSeverity('success')\n        })\n        .catch((error) =>{\n            setMessage('Une erreur est survenue')\n            setSeverity('error')\n        })\n        .finally(() => {\n            setOpenSnack(true);\n            setSelectedUser(false);\n            getUsers();\n        })\n    }\n\n    const deleteUser = (id) => {\n        axios.delete(`${BASEURL}/users/${id}/delete`, {headers: {\n            'Authorization' : `Bearer ${token}`\n        }})\n        .then((res) => {\n            setMessage('Utilisateur supprimé')\n            setSeverity('success')\n        })\n        .catch((error) =>{\n            setMessage(\"Une erreur est survenue\")\n            setSeverity('error')\n        })\n        .finally(() => {\n            setOpenSnack(true);\n            closeDialog();\n            getUsers();;\n        })\n    }\n\n    const createNewUser = () => {\n        if(newUser.password !== confirmPass){\n            setErrorNewUser(true)\n            return;\n        }\n             axios.post(`${BASEURL}/users/create`,\n                {\n                    name: newUser.name,\n                    email: newUser.email,\n                    role: newUser.role,\n                    password: newUser.password\n                },         \n                {headers: {\n                    'Authorization' : `Bearer ${token}`\n                }}\n            )\n            .then((res) => {\n                setMessage('Nouvel utilisateur ajouté')\n                setSeverity('success')\n            })\n            .catch((error) =>{\n                setMessage('Une erreur est survenue')\n                setSeverity('error')\n            })\n            .finally(() => {\n                setOpenSnack(true);\n                setDisplayNewUser(false);\n                getUsers();\n            })\n    }\n\n    const rolesEnum = [\"admin\", \"user\"]\n    Object.freeze(rolesEnum);\n    \n    useEffect(() => {\n        getUsers()\n    }, [])\n\n    return (\n        <>\n            <Box sx={{display:'flex', justifyContent: 'end', mb: 5}}>\n                <Button content=\"Ajouter\" onClick={() => {setSelectedUser(false); setDisplayNewUser(true)}}/>\n            </Box>\n            { displayNewUser &&\n            <>           \n            <H1 content=\"Ajouter un utilisateur\" />    \n            <StyledContainer>\n                <Box>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Nom :</Typography>\n                        <TextField variant=\"outlined\" type=\"text\" required value={newUser.name} onChange={handleNewUserName} sx={{width: 250}}/>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Email :</Typography>\n                        <TextField variant=\"outlined\" type=\"email\" required value={newUser.email} onChange={handleNewUserEmail} sx={{width: 250}}/>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Rôle :</Typography>\n                        <Select\n                        onChange={handleNewUserRole}\n                        sx={{width: 250}}\n                        defaultValue=\"user\"\n                        required\n                        >\n                            <MenuItem value=\"admin\">admin</MenuItem>\n                            <MenuItem value=\"user\">user</MenuItem>\n                        </Select>\n                    </StyledBox> \n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Mot de passe :</Typography>\n                        <TextField  variant=\"outlined\" type=\"password\" required onChange={handleNewUserPassword} sx={{width: 250}}/>\n                        {errorNewUser && \n                            <Typography color=\"error\" sx={{mr: 1}} variant=\"caption\">Les mots de passe ne correspondent pas</Typography>\n\n                        }\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Confirmation du mot de passe :</Typography>\n                        <TextField variant=\"outlined\" type=\"password\" required onChange={handleNewUserConfirmPass} sx={{width: 250}}/>\n                        {errorNewUser && \n                            <Typography color=\"error\" sx={{mr: 1}} variant=\"caption\">Les mots de passe ne correspondent pas</Typography>\n                        }\n                        \n                    </StyledBox>\n                </Box>\n                <Box sx={{display:'flex',  justifyContent:'space-around'}}>\n                    <Button content=\"Valider\" onClick={ createNewUser}/>\n                    <RedButton content=\"Annuler\" onClick={() => setDisplayNewUser(false)} />\n                </Box>\n            </StyledContainer>\n            </>\n            }\n            {selectedUser &&    \n            <>\n            <H1 content=\"Modifier un utilisateur\" />    \n            <StyledContainer>\n            <StyledBox>\n                <Typography sx={{mr: 2}}> Nom :</Typography>\n                <TextField variant=\"outlined\" value={selectedUser.name} onChange={handleUpdatedNameChange} sx={{width: 250}}/>\n            </StyledBox>\n            <StyledBox>\n                <Typography sx={{mr: 2}}> Email :</Typography>\n                <TextField variant=\"outlined\" value={selectedUser.email} onChange={handleUpdatedEmailChange} sx={{width: 250}}/>\n            </StyledBox>\n            <StyledBox>\n                <Typography sx={{mr: 2}}> Rôle :</Typography>\n                <Select\n                onChange={handleUpdatedRoleChange}\n                value={selectedUser.role}\n                sx={{width: 250}}\n                >\n                    <MenuItem value=\"admin\">admin</MenuItem>\n                    <MenuItem value=\"user\">user</MenuItem>\n                </Select>\n            </StyledBox>\n            <Box sx={{display:'flex',  justifyContent:'space-around'}}>     \n                <Button content=\"Valider\" onClick={() => updateUser(selectedUser)}/>\n                <RedButton content=\"Annuler\" onClick={() => setSelectedUser(false)}/>\n            </Box>\n\n            </StyledContainer>\n            <Divider sx={{mb:`${pxToRem(30)}`}}/>\n            </>\n            }\n        \n            <TableContainer sx={{ minWidth: 650, minHeight: 682, maxHeight: 682}}>\n            {users && \n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow sx={{fontWeight:'bold', borderBottom:2}}>\n                            <TableCell sx={{fontWeight:'bold'}}>ID</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Nom</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Email</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Rôle</TableCell>\n                            <TableCell align=\"center\" sx={{fontWeight:'bold'}}>Mettre à jour</TableCell>\n                            <TableCell align=\"center\" sx={{fontWeight:'bold'}}>Supprimer</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {users.map((user) => (\n                        <TableRow\n                        key={user.id}\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                        <TableCell component=\"th\" scope=\"row\">\n                            {user.id}\n                        </TableCell>\n                        <TableCell align=\"left\">{user.name}</TableCell>\n                        <TableCell align=\"left\">{user.email}</TableCell>\n                        <TableCell align=\"left\">{user.role}</TableCell>\n                        <TableCell align=\"center\"><AutoFixHighIcon color=\"primary\" sx={{cursor: \"pointer\"}} onClick={() => { \n                            setSelectedUser({name : user.name, email: user.email, role: user.role, id: user.id});  setDisplayNewUser(false);\n                        }}/></TableCell>\n                        <TableCell align=\"center\"><DeleteIcon color=\"error\" sx={{cursor: \"pointer\"}} onClick={() => handleOpenDialog(user.id)}/></TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n            }\n            </TableContainer>\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={5000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n            >\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                {message}\n                </Alert>\n            </Snackbar>\n\n            <Dialog\n            open={openDialog}\n            onClose={closeDialog}>\n                <DialogTitle id=\"alert-dialog-title\">\n                {\"Êtes-vous sûr?\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Cette action est définitive.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button content=\"Annuler\" onClick={closeDialog}/>\n                    <RedButton content=\"Confirmer\" onClick={() => deleteUser(userId)}/>\n                </DialogActions>\n        </Dialog>\n        </>\n    )\n}\n\nAdminTableUsers.propTypes = {\n    users: PropTypes.array\n}\n\nexport default AdminTableUsers;\n\n\n","/home/virgile/mpp/src/Components/Admin/AdminTablePlantation.js",["337"],[],"import React, {useState, useEffect} from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Box, Typography } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Divider from '@mui/material/Divider';\nimport pxToRem from '../../Services/pxToRem'\nimport styled from 'styled-components'\nimport Button from '../Button';\nimport RedButton from '../RedButton';\nimport H1 from '../H1';\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\nimport axios from 'axios';\nimport baseUrl from '../../Config/baseUrl'\nimport PropTypes from 'prop-types';\nimport styles from '../../Config/theme/styles';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n\nconst StyledContainer = styled.div`\n    width: 50%;\n    margin: ${styles.margin.xxl} auto;\n    display:flex;\n    flex-direction:column;\n    padding:2%;\n    border-radius:50px;\n    box-shadow: ${styles.boxShadow.xl}\n`\nconst StyledBox = styled.div`\n    display:flex;\n    justify-content: space-between;\n    padding:1%;\n`\nconst months = [\n    {name: 'janvier'},\n    {name: 'fevrier'},\n    {name: 'mars'},\n    {name: 'avril'},\n    {name: 'mai'},\n    {name: 'juin'},\n    {name: 'juillet'},\n    {name: 'aout'},\n    {name: 'septembre'},\n    {name: 'octobre'},\n    {name: 'novembre'},\n    {name: 'decembre'}\n]\n\nconst AdminTablePlantation = (props) => {\n    const {categories} = props;\n    const token = localStorage.getItem('token');\n\n    const [plants, setPlants] = useState([]);\n    const [selectedPlant, setSelectedPlant] = useState();\n    const [displayUpdateForm, setDisplayUpdateForm] = useState(false);\n    const [displayNewPlant, setDisplayNewPlant] = useState(false);\n    const [newPlant, setNewPlant] = useState({\n        name: '',\n        category_id: '',\n        description: '',\n        density: '',\n        water_quantity: '',\n        start_sowing_month : '',\n        end_sowing_month: '',\n        start_harvest_month: '',\n        end_harvest_month:'',\n        image_url: '',\n        climat_id: 1\n    })\n\n    const [openSnack, setOpenSnack] = useState(false)\n    const [message, setMessage] = useState('')\n    const [severity, setSeverity] = useState('')\n\n    const handleClose = () => {\n        setOpenSnack(false);\n    };\n\n    const defaultImg = 'https://decizia.com/blog/wp-content/uploads/2017/06/default-placeholder.png';\n// Create new plant\n    const handleNewPlantName = (event) => {\n        setNewPlant({...newPlant, name: event.target.value})\n    }\n    const handleNewPlantCategory = (event) => {\n        setNewPlant({...newPlant, category_id: event.target.value})\n    }\n    const handleNewPlantDescription = (event) => {\n        setNewPlant({...newPlant, description: event.target.value})\n    }\n    const handleNewPlantDensity = (event) => {\n        setNewPlant({...newPlant, density: event.target.value})\n    }\n    const handleNewPlantWater = (event) => {\n        setNewPlant({...newPlant, water_quantity: event.target.value})\n    }\n    const handleNewPlantStartSowingChange = (event) => {\n        setNewPlant({...newPlant, start_sowing_month: event.target.value})\n    }\n    const handleNewPlantEndSowingChange = (event) => {\n        setNewPlant({...newPlant, end_sowing_month: event.target.value})\n    }\n    const handleNewPlantStartHarvestChange  = (event) => {\n        setNewPlant({...newPlant, start_harvest_month: event.target.value})\n    }\n    const handleNewPlantEndHarvestChange = (event) => {\n        setNewPlant({...newPlant, end_harvest_month: event.target.value})\n    }\n    const handleNewPlantImageUrl = (event) => {\n        setNewPlant({...newPlant, image_url: event.target.value})\n    }\n\n // Update Plant\n    const handleNameChange = (event) => {\n        setSelectedPlant({...selectedPlant, name: event.target.value})\n    }\n    const handleDescChange = (event) => {\n        setSelectedPlant({...selectedPlant, description: event.target.value})\n    }\n    const handleDensityChange = (event) => {\n        setSelectedPlant({...selectedPlant, density: event.target.value})\n    }\n    const handleWaterChange = (event) => {\n        setSelectedPlant({...selectedPlant, water_quantity: event.target.value})\n    }\n    const handleStartSowingChange = (event) => {\n        setSelectedPlant({...selectedPlant, start_sowing_month: event.target.value})\n    }\n    const handleEndSowingChange = (event) => {\n        setSelectedPlant({...selectedPlant, end_sowing_month: event.target.value})\n    }\n    const handleStartHarvestChange = (event) => {\n        setSelectedPlant({...selectedPlant, start_harvest_month: event.target.value})\n    }\n    const handleEndHarvestChange = (event) => {\n        setSelectedPlant({...selectedPlant, end_harvest_month: event.target.value})\n    }\n    const handleCategoryChange = (event) => {\n        setSelectedPlant({...selectedPlant, category_id: event.target.value})\n    }\n    const handleImageUrlChange = (event) => {\n        setSelectedPlant({...selectedPlant, image_url: event.target.value})\n    }\n\n    const getPlants = async () => {\n        try{\n            await axios.get(`${baseUrl}/plants`, {headers: {'Authorization': `Bearer ${token}`}}).then((res) => {\n                setPlants(res.data)\n            });\n        }catch(error){\n            console.error(error);\n        }\n    }\n    \n    const createNewPlantation = (event) => {\n        event.preventDefault();\n            axios.post(baseUrl + \"/plants/create\", {\n                name: newPlant.name,\n                category: newPlant.category_id,\n                description: newPlant.description,\n                density: newPlant.density,\n                waterQuantity: newPlant.water_quantity,\n                startSowingMonth: newPlant.start_sowing_month,\n                endSowingMonth: newPlant.end_harvest_month,\n                startHarvestMonth: newPlant.start_harvest_month,\n                endHarvestMonth: newPlant.end_sowing_month,\n                imageUrl: newPlant.image_url,\n                climatId: newPlant.climat_id\n                },\n                {headers: { 'Authorization' : `Bearer ${token}` }}\n                )\n                .then((res) => {\n                    setMessage('OK')\n                    setSeverity('success')\n                })\n                .catch((error) =>{\n                    setMessage('KO')\n                    setSeverity('error')\n                })\n                .finally(() => {\n                    setOpenSnack(true);\n                    getPlants();\n                    setDisplayNewPlant(false);\n                })\n    }\n  \n    const updatePlant = () => {\n\n        if (selectedPlant.climat_id === null || selectedPlant.climat_id === undefined) {\n            selectedPlant.climat_id = 1;\n        }\n            axios.put(baseUrl + \"/plants/\" + selectedPlant.id + \"/update\", {\n                category: selectedPlant.category_id,\n                name: selectedPlant.name,\n                imageUrl: selectedPlant.image_url,\n                description: selectedPlant.description,\n                density: selectedPlant.density,\n                waterQuantity: selectedPlant.water_quantity,\n                startSowingMonth: selectedPlant.start_sowing_month,\n                endSowingMonth: selectedPlant.end_sowing_month,\n                startHarvestMonth: selectedPlant.start_harvest_month,\n                endHarvestMonth: selectedPlant.end_harvest_month,\n                climatId: selectedPlant.climat_id\n                },\n                {\n                    headers: {\n                    'Authorization' : `Bearer ${token}`\n                    }\n                })\n            .then((res) => {\n                setSelectedPlant({\n                    category: selectedPlant.category_id,\n                    name: selectedPlant.name,\n                    imageUrl: selectedPlant.image_url,\n                    description: selectedPlant.description,\n                    density: selectedPlant.density,\n                    waterQuantity: selectedPlant.water_quantity,\n                    startSowingMonth: selectedPlant.start_sowing_month,\n                    endSowingMonth: selectedPlant.end_sowing_month,\n                    startHarvestMonth: selectedPlant.start_harvest_month,\n                    endHarvestMonth: selectedPlant.end_harvest_month,\n                    climatId: selectedPlant.climat_id\n                });\n                setMessage('Plante mise à jour')\n                setSeverity('success')\n            })\n            .catch((error) =>{\n                setMessage('Une erreur est survenue')\n                setSeverity('error')\n            })\n            .finally(() => {\n                setOpenSnack(true);\n                getPlants();\n                setDisplayUpdateForm(false);\n            })\n    }\n\n    const deletePlant = (id) => {\n        axios.delete(`${baseUrl}/plants/${id}/delete`,\n        {headers: {\n            'Authorization' : `Bearer ${token}`\n        }})\n        .then((res) => {\n            setMessage(res.data)\n            setSeverity('success')\n        })\n        .catch((error) =>{\n            setMessage(error.response)\n            setSeverity('error')\n        })\n        .finally(() => {\n            setOpenSnack(true);\n            getPlants();\n        })\n    }\n\n    useEffect(() => {\n        getPlants();\n    }, [])\n\n\n    const sortedPlants = [...plants].sort((a, b) =>\n    a.name > b.name ? 1 : -1,\n  );\n\n    return (\n        <>\n            <Box sx={{display:'flex', justifyContent: 'end', mb: 5}}>\n                <Button content=\"Ajouter\" onClick={() => {setDisplayNewPlant(true); setDisplayUpdateForm(false)} }/>\n            </Box>\n            {displayNewPlant && \n            <>\n                        <H1 content=\"Ajouter une plante\" />\n\n                <StyledContainer>\n\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Nom :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={newPlant.name} onChange={handleNewPlantName} />\n                    </StyledBox>\n\n                    <StyledBox >\n                    <Typography sx={{mr: 2}}> Catégorie :</Typography>\n                        <Select\n                        value={newPlant.category_id}\n                        onChange={handleNewPlantCategory}\n                        sx={{width: 250}}\n                        defaultValue=\"2\"\n                        >\n                            {categories.map((category) => <MenuItem key={category.id} value={category.id}>{category.name}</MenuItem>)}\n                        </Select>\n                    </ StyledBox >\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Description :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={newPlant.description} onChange={handleNewPlantDescription} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Densité /m² :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" type=\"number\" value={newPlant.density} onChange={handleNewPlantDensity} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Eau (L) :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" type=\"number\" value={newPlant.water_quantity} onChange={handleNewPlantWater} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Début semis :</Typography>\n                        <Select\n                        value= {newPlant.start_sowing_month}\n                        // defaultValue=\"Janvier\"\n                        onChange={handleNewPlantStartSowingChange}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Fin semis :</Typography>\n                        <Select\n                            value= {newPlant.end_sowing_month}\n                        // defaultValue=\"Choisir\"\n                        onChange={handleNewPlantEndSowingChange}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Début récolte :</Typography>\n                        <Select\n                            value= {newPlant.start_harvest_month}\n                            onChange={handleNewPlantStartHarvestChange}\n                            sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Fin récolte:</Typography>\n                        <Select\n                            value= {newPlant.end_harvest_month}\n                            onChange={handleNewPlantEndHarvestChange}\n                            sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> URL de l'image</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={newPlant.image_url} onChange={handleNewPlantImageUrl} />\n                    </StyledBox>\n                <Box sx={{display:'flex',  justifyContent:'space-around'}}>  \n                    <Button content=\"Valider\" onClick={createNewPlantation}/>\n                    <RedButton content=\"Annuler\" onClick={() => setDisplayNewPlant(false)}/> \n                </Box>\n                </StyledContainer>\n                <Divider sx={{mb:`${pxToRem(30)}`, mt:`${pxToRem(30)}`}}/>\n            </>\n            }\n            {displayUpdateForm &&  \n            <> \n            <H1 content=\"Mettre à jour une plantation\" />\n                <StyledContainer>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Nom :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={selectedPlant.name} onChange={handleNameChange}/>\n                    </StyledBox>\n\n                     <StyledBox >\n                     <Typography sx={{mr: 2}}> Catégorie :</Typography>\n                        <Select\n                        onChange={handleCategoryChange}\n                        value={selectedPlant.category_id}\n                        sx={{width: 250}}\n                        >\n                            {categories.map((category) => <MenuItem key={category.id} value={category.id}>{category.name}</MenuItem>)}\n                        </Select>\n                    </ StyledBox >\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Description :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={selectedPlant.description} onChange={handleDescChange} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Densité /m2 :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={selectedPlant.density} onChange={handleDensityChange} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Eau (L) :</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={selectedPlant.water_quantity} onChange={handleWaterChange} />\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Début semis :</Typography>\n                        <Select\n                        onChange={handleStartSowingChange}\n                        value={selectedPlant.start_sowing_month}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Fin semis :</Typography>\n                        <Select\n                        onChange={handleEndSowingChange}\n                        value={selectedPlant.end_sowing_month}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Début récolte :</Typography>\n                        <Select\n                        onChange={handleStartHarvestChange}\n                        value={selectedPlant.start_harvest_month}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> Fin récolte:</Typography>\n                        <Select\n                        onChange={handleEndHarvestChange}\n                        value={selectedPlant.end_harvest_month}\n                        sx={{width: 250}}\n                        >\n                            {months.map((month) => <MenuItem key={month.name} value={month.name}>{month.name}</MenuItem>)}\n                        </Select>\n                    </StyledBox>\n                    <StyledBox>\n                        <Typography sx={{mr: 2}}> URL de l'image</Typography>\n                        <TextField sx={{width: 250}} variant=\"outlined\" value={selectedPlant.image_url} onChange={handleImageUrlChange} />\n                    </StyledBox>\n                    <Box sx={{display:'flex',  justifyContent:'space-around'}}>  \n                        <Button content=\"Valider\" onClick={() => updatePlant()}/>\n                        <RedButton content=\"Annuler\" onClick={() => setDisplayUpdateForm(false)}/>\n                    </Box>\n                    \n                </StyledContainer>\n                <Divider sx={{mb:`${pxToRem(30)}`, mt:`${pxToRem(30)}`}}/>\n                </> \n            }\n\n            <TableContainer  sx={{ minWidth: 650, maxHeight: 682}} >\n            {sortedPlants ?        \n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell sx={{fontWeight:'bold'}}>ID</TableCell>\n                            <TableCell align=\"center\" sx={{fontWeight:'bold'}}>Image</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Nom</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Catégorie</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Description</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Densité</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Eau</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Semis</TableCell>\n                            <TableCell align=\"left\" sx={{fontWeight:'bold'}}>Récoltes</TableCell>\n                            <TableCell align=\"center\" sx={{fontWeight:'bold'}}>Mettre à jour</TableCell>\n                            <TableCell align=\"center\" sx={{fontWeight:'bold'}}>Supprimer</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n\n                        { sortedPlants.map((plant) => (\n                        <TableRow\n                            key={plant.id}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n\n                            <TableCell component=\"th\" scope=\"row\">\n                                {plant.id}\n                            </TableCell>\n                            <TableCell align=\"center\"><img width=\"100\" src={plant.image_url ? plant.image_url  : defaultImg} alt={`${plant.name}`}/></TableCell>\n                            <TableCell align=\"left\">{plant.name}</TableCell>\n                            <TableCell align=\"left\">{plant.category_name}</TableCell>\n                            <TableCell align=\"left\">{plant.description}</TableCell>\n                            <TableCell align=\"left\">{plant.density} / m²</TableCell>\n                            <TableCell align=\"left\">{plant.water_quantity} litres</TableCell>\n                            <TableCell align=\"left\">{plant.start_sowing_month.toUpperCase()} à {plant.end_sowing_month.toUpperCase()} </TableCell>\n                            <TableCell align=\"left\">{plant.start_harvest_month.toUpperCase()} à {plant.end_harvest_month.toUpperCase()} </TableCell>\n                            <TableCell align=\"center\"><AutoFixHighIcon color=\"primary\" sx={{cursor: \"pointer\"}} onClick={() => {setDisplayUpdateForm(true); setDisplayNewPlant(false); setSelectedPlant({...plant})}}/></TableCell>\n                            <TableCell align=\"center\"><DeleteIcon color=\"error\" sx={{cursor: \"pointer\"}} onClick={() => deletePlant(plant.id)}/></TableCell>\n                        </TableRow>\n                         ))} \n                    </TableBody>\n                </Table>\n            :\n            <p>Aucun produit disponible actuellement</p>\n            }\n            </TableContainer>\n\n            <Snackbar\n                open={openSnack}\n                autoHideDuration={5000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal:'center' }}\n            >\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                {message}\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n\nAdminTablePlantation.propTypes = {\n    plants: PropTypes.array\n}\n\nexport default AdminTablePlantation;","/home/virgile/mpp/src/Services/getAuth.js",[],[],"/home/virgile/mpp/src/Services/login.js",[],[],"/home/virgile/mpp/src/Components/Logo/index.js",[],[],"/home/virgile/mpp/src/Components/SignCard/index.js",[],[],"/home/virgile/mpp/src/Components/ImgCal/index.js",[],[],"/home/virgile/mpp/src/Components/AddButton/index.js",[],[],{"ruleId":"338","severity":1,"message":"339","line":28,"column":9,"nodeType":"340","messageId":"341","endLine":28,"endColumn":13},{"ruleId":"338","severity":1,"message":"342","line":25,"column":17,"nodeType":"340","messageId":"341","endLine":25,"endColumn":24,"suppressions":"343"},{"ruleId":"338","severity":1,"message":"344","line":52,"column":13,"nodeType":"340","messageId":"341","endLine":52,"endColumn":17},{"ruleId":"345","severity":1,"message":"346","line":177,"column":8,"nodeType":"347","endLine":177,"endColumn":16,"suggestions":"348"},{"ruleId":"338","severity":1,"message":"349","line":19,"column":8,"nodeType":"340","messageId":"341","endLine":19,"endColumn":20},{"ruleId":"338","severity":1,"message":"350","line":65,"column":12,"nodeType":"340","messageId":"341","endLine":65,"endColumn":19},{"ruleId":"338","severity":1,"message":"351","line":66,"column":12,"nodeType":"340","messageId":"341","endLine":66,"endColumn":18},{"ruleId":"338","severity":1,"message":"352","line":218,"column":11,"nodeType":"340","messageId":"341","endLine":218,"endColumn":29},{"ruleId":"345","severity":1,"message":"353","line":235,"column":8,"nodeType":"347","endLine":235,"endColumn":16,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":247,"column":25,"nodeType":"357","messageId":"358","endLine":247,"endColumn":27},{"ruleId":"355","severity":1,"message":"356","line":261,"column":25,"nodeType":"357","messageId":"358","endLine":261,"endColumn":27},{"ruleId":"355","severity":1,"message":"356","line":272,"column":25,"nodeType":"357","messageId":"358","endLine":272,"endColumn":27},{"ruleId":"345","severity":1,"message":"359","line":175,"column":8,"nodeType":"347","endLine":175,"endColumn":16,"suggestions":"360"},{"ruleId":"338","severity":1,"message":"361","line":1,"column":16,"nodeType":"340","messageId":"341","endLine":1,"endColumn":26},{"ruleId":"338","severity":1,"message":"362","line":69,"column":10,"nodeType":"340","messageId":"341","endLine":69,"endColumn":22},{"ruleId":"355","severity":1,"message":"363","line":124,"column":59,"nodeType":"357","messageId":"358","endLine":124,"endColumn":61},{"ruleId":"338","severity":1,"message":"364","line":4,"column":8,"nodeType":"340","messageId":"341","endLine":4,"endColumn":15},{"ruleId":"338","severity":1,"message":"365","line":5,"column":8,"nodeType":"340","messageId":"341","endLine":5,"endColumn":13},{"ruleId":"338","severity":1,"message":"344","line":55,"column":12,"nodeType":"340","messageId":"341","endLine":55,"endColumn":16},{"ruleId":"338","severity":1,"message":"366","line":56,"column":12,"nodeType":"340","messageId":"341","endLine":56,"endColumn":16},{"ruleId":"338","severity":1,"message":"367","line":129,"column":23,"nodeType":"340","messageId":"341","endLine":129,"endColumn":30},{"ruleId":"338","severity":1,"message":"368","line":62,"column":24,"nodeType":"340","messageId":"341","endLine":62,"endColumn":37,"suppressions":"369"},{"ruleId":"355","severity":1,"message":"363","line":133,"column":63,"nodeType":"357","messageId":"358","endLine":133,"endColumn":65},{"ruleId":"338","severity":1,"message":"370","line":59,"column":12,"nodeType":"340","messageId":"341","endLine":59,"endColumn":17},{"ruleId":"355","severity":1,"message":"363","line":128,"column":51,"nodeType":"357","messageId":"358","endLine":128,"endColumn":53},{"ruleId":"338","severity":1,"message":"371","line":6,"column":8,"nodeType":"340","messageId":"341","endLine":6,"endColumn":17},{"ruleId":"338","severity":1,"message":"372","line":77,"column":28,"nodeType":"340","messageId":"341","endLine":77,"endColumn":36},{"ruleId":"338","severity":1,"message":"372","line":56,"column":27,"nodeType":"340","messageId":"341","endLine":56,"endColumn":35},{"ruleId":"345","severity":1,"message":"373","line":196,"column":8,"nodeType":"347","endLine":196,"endColumn":10,"suggestions":"374"},{"ruleId":"345","severity":1,"message":"375","line":265,"column":8,"nodeType":"347","endLine":265,"endColumn":10,"suggestions":"376"},"no-unused-vars","'role' is assigned a value but never used.","Identifier","unusedVar","'setAuth' is assigned a value but never used.",["377"],"'auth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["378"],"'FilterRegion' is defined but never used.","'regions' is assigned a value but never used.","'region' is assigned a value but never used.","'handleRegionChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getGardens' and 'getUserPlants'. Either include them or remove the dependency array.",["379"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getAll'. Either include it or remove the dependency array.",["380"],"'useContext' is defined but never used.","'anchorElUser' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'baseUrl' is defined but never used.","'axios' is defined but never used.","'user' is assigned a value but never used.","'request' is assigned a value but never used.","'setEmailError' is assigned a value but never used.",["381"],"'error' is assigned a value but never used.","'AddButton' is defined but never used.","'addPlant' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["382"],"React Hook useEffect has a missing dependency: 'getPlants'. Either include it or remove the dependency array.",["383"],{"kind":"384","justification":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"kind":"384","justification":"385"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},"directive","","Update the dependencies array to be: [loadUser, userId]",{"range":"396","text":"397"},"Update the dependencies array to be: [getGardens, getUserPlants, userId]",{"range":"398","text":"399"},"Update the dependencies array to be: [getAll, userId]",{"range":"400","text":"401"},"Update the dependencies array to be: [getUsers]",{"range":"402","text":"403"},"Update the dependencies array to be: [getPlants]",{"range":"404","text":"405"},[5650,5658],"[loadUser, userId]",[6717,6725],"[getGardens, getUserPlants, userId]",[5384,5392],"[getAll, userId]",[6081,6083],"[getUsers]",[9647,9649],"[getPlants]"]